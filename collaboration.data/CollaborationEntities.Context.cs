//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace Collaboration.Business.Entities
{
    public partial class CollaborationDBContext : ObjectContext
    {
        public const string ConnectionString = "name=CollaborationDBContext";
        public const string ContainerName = "CollaborationDBContext";
    
        #region Constructors
    
        public CollaborationDBContext()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public CollaborationDBContext(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public CollaborationDBContext(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<FingerSize> FingerSizes
        {
            get { return _fingerSizes  ?? (_fingerSizes = CreateObjectSet<FingerSize>("FingerSizes")); }
        }
        private ObjectSet<FingerSize> _fingerSizes;
    
        public ObjectSet<Message> Messages
        {
            get { return _messages  ?? (_messages = CreateObjectSet<Message>("Messages")); }
        }
        private ObjectSet<Message> _messages;
    
        public ObjectSet<MessagesAttachment> MessagesAttachments
        {
            get { return _messagesAttachments  ?? (_messagesAttachments = CreateObjectSet<MessagesAttachment>("MessagesAttachments")); }
        }
        private ObjectSet<MessagesAttachment> _messagesAttachments;
    
        public ObjectSet<MessageThread> MessageThreads
        {
            get { return _messageThreads  ?? (_messageThreads = CreateObjectSet<MessageThread>("MessageThreads")); }
        }
        private ObjectSet<MessageThread> _messageThreads;
    
        public ObjectSet<MessageTo> MessageToes
        {
            get { return _messageToes  ?? (_messageToes = CreateObjectSet<MessageTo>("MessageToes")); }
        }
        private ObjectSet<MessageTo> _messageToes;
    
        public ObjectSet<Metal> Metals
        {
            get { return _metals  ?? (_metals = CreateObjectSet<Metal>("Metals")); }
        }
        private ObjectSet<Metal> _metals;
    
        public ObjectSet<OrderParticipant> OrderParticipants
        {
            get { return _orderParticipants  ?? (_orderParticipants = CreateObjectSet<OrderParticipant>("OrderParticipants")); }
        }
        private ObjectSet<OrderParticipant> _orderParticipants;
    
        public ObjectSet<OrdersCAD> OrdersCADs
        {
            get { return _ordersCADs  ?? (_ordersCADs = CreateObjectSet<OrdersCAD>("OrdersCADs")); }
        }
        private ObjectSet<OrdersCAD> _ordersCADs;
    
        public ObjectSet<OrderSerialNumber> OrderSerialNumbers
        {
            get { return _orderSerialNumbers  ?? (_orderSerialNumbers = CreateObjectSet<OrderSerialNumber>("OrderSerialNumbers")); }
        }
        private ObjectSet<OrderSerialNumber> _orderSerialNumbers;
    
        public ObjectSet<OrderStatu> OrderStatus
        {
            get { return _orderStatus  ?? (_orderStatus = CreateObjectSet<OrderStatu>("OrderStatus")); }
        }
        private ObjectSet<OrderStatu> _orderStatus;
    
        public ObjectSet<Priority> Priorities
        {
            get { return _priorities  ?? (_priorities = CreateObjectSet<Priority>("Priorities")); }
        }
        private ObjectSet<Priority> _priorities;
    
        public ObjectSet<ProcessType> ProcessTypes
        {
            get { return _processTypes  ?? (_processTypes = CreateObjectSet<ProcessType>("ProcessTypes")); }
        }
        private ObjectSet<ProcessType> _processTypes;
    
        public ObjectSet<RingType> RingTypes
        {
            get { return _ringTypes  ?? (_ringTypes = CreateObjectSet<RingType>("RingTypes")); }
        }
        private ObjectSet<RingType> _ringTypes;
    
        public ObjectSet<Role> Roles
        {
            get { return _roles  ?? (_roles = CreateObjectSet<Role>("Roles")); }
        }
        private ObjectSet<Role> _roles;
    
        public ObjectSet<Sample> Samples
        {
            get { return _samples  ?? (_samples = CreateObjectSet<Sample>("Samples")); }
        }
        private ObjectSet<Sample> _samples;
    
        public ObjectSet<Specimen> Specimens
        {
            get { return _specimens  ?? (_specimens = CreateObjectSet<Specimen>("Specimens")); }
        }
        private ObjectSet<Specimen> _specimens;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;
    
        public ObjectSet<Order> Orders
        {
            get { return _orders  ?? (_orders = CreateObjectSet<Order>("Orders")); }
        }
        private ObjectSet<Order> _orders;
    
        public ObjectSet<Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<Customer>("Customers")); }
        }
        private ObjectSet<Customer> _customers;
    
        public ObjectSet<SampleStatu> SampleStatus
        {
            get { return _sampleStatus  ?? (_sampleStatus = CreateObjectSet<SampleStatu>("SampleStatus")); }
        }
        private ObjectSet<SampleStatu> _sampleStatus;
    
        public ObjectSet<SamplesTracking> SamplesTrackings
        {
            get { return _samplesTrackings  ?? (_samplesTrackings = CreateObjectSet<SamplesTracking>("SamplesTrackings")); }
        }
        private ObjectSet<SamplesTracking> _samplesTrackings;
    
        public ObjectSet<TicketThread> TicketThreads
        {
            get { return _ticketThreads  ?? (_ticketThreads = CreateObjectSet<TicketThread>("TicketThreads")); }
        }
        private ObjectSet<TicketThread> _ticketThreads;
    
        public ObjectSet<Ticket> Tickets
        {
            get { return _tickets  ?? (_tickets = CreateObjectSet<Ticket>("Tickets")); }
        }
        private ObjectSet<Ticket> _tickets;
    
        public ObjectSet<TicketsAttachment> TicketsAttachments
        {
            get { return _ticketsAttachments  ?? (_ticketsAttachments = CreateObjectSet<TicketsAttachment>("TicketsAttachments")); }
        }
        private ObjectSet<TicketsAttachment> _ticketsAttachments;
    
        public ObjectSet<TicketTo> TicketToes
        {
            get { return _ticketToes  ?? (_ticketToes = CreateObjectSet<TicketTo>("TicketToes")); }
        }
        private ObjectSet<TicketTo> _ticketToes;
    
        public ObjectSet<ModelType> ModelTypes
        {
            get { return _modelTypes  ?? (_modelTypes = CreateObjectSet<ModelType>("ModelTypes")); }
        }
        private ObjectSet<ModelType> _modelTypes;
    
        public ObjectSet<SamplesTrackingHistory> SamplesTrackingHistories
        {
            get { return _samplesTrackingHistories  ?? (_samplesTrackingHistories = CreateObjectSet<SamplesTrackingHistory>("SamplesTrackingHistories")); }
        }
        private ObjectSet<SamplesTrackingHistory> _samplesTrackingHistories;

        #endregion
        #region Function Imports
        public ObjectResult<Nullable<int>> ValidateUser(string username, string password)
        {
    
            ObjectParameter usernameParameter;
    
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("ValidateUser", usernameParameter, passwordParameter);
        }
        public ObjectResult<User> GetUserInfo(Nullable<int> userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<User>("GetUserInfo", userIDParameter);
        }
        public ObjectResult<Nullable<int>> CreateUser(string userName, string firstName, string lastName, string password, string eMail, string mobile, string imageLocationURL, Nullable<bool> isActive, Nullable<int> roleID, Nullable<bool> defaultPasswordChanged)
        {
    
            ObjectParameter userNameParameter;
    
            if (userName != null)
            {
                userNameParameter = new ObjectParameter("UserName", userName);
            }
            else
            {
                userNameParameter = new ObjectParameter("UserName", typeof(string));
            }
    
            ObjectParameter firstNameParameter;
    
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(string));
            }
    
            ObjectParameter lastNameParameter;
    
            if (lastName != null)
            {
                lastNameParameter = new ObjectParameter("LastName", lastName);
            }
            else
            {
                lastNameParameter = new ObjectParameter("LastName", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
    
            ObjectParameter eMailParameter;
    
            if (eMail != null)
            {
                eMailParameter = new ObjectParameter("EMail", eMail);
            }
            else
            {
                eMailParameter = new ObjectParameter("EMail", typeof(string));
            }
    
            ObjectParameter mobileParameter;
    
            if (mobile != null)
            {
                mobileParameter = new ObjectParameter("Mobile", mobile);
            }
            else
            {
                mobileParameter = new ObjectParameter("Mobile", typeof(string));
            }
    
            ObjectParameter imageLocationURLParameter;
    
            if (imageLocationURL != null)
            {
                imageLocationURLParameter = new ObjectParameter("ImageLocationURL", imageLocationURL);
            }
            else
            {
                imageLocationURLParameter = new ObjectParameter("ImageLocationURL", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter roleIDParameter;
    
            if (roleID.HasValue)
            {
                roleIDParameter = new ObjectParameter("RoleID", roleID);
            }
            else
            {
                roleIDParameter = new ObjectParameter("RoleID", typeof(int));
            }
    
            ObjectParameter defaultPasswordChangedParameter;
    
            if (defaultPasswordChanged.HasValue)
            {
                defaultPasswordChangedParameter = new ObjectParameter("DefaultPasswordChanged", defaultPasswordChanged);
            }
            else
            {
                defaultPasswordChangedParameter = new ObjectParameter("DefaultPasswordChanged", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("CreateUser", userNameParameter, firstNameParameter, lastNameParameter, passwordParameter, eMailParameter, mobileParameter, imageLocationURLParameter, isActiveParameter, roleIDParameter, defaultPasswordChangedParameter);
        }
        public ObjectResult<Nullable<int>> CreateModelType(string modelCode, string description, Nullable<int> sortOrder, Nullable<bool> isActive)
        {
    
            ObjectParameter modelCodeParameter;
    
            if (modelCode != null)
            {
                modelCodeParameter = new ObjectParameter("ModelCode", modelCode);
            }
            else
            {
                modelCodeParameter = new ObjectParameter("ModelCode", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter sortOrderParameter;
    
            if (sortOrder.HasValue)
            {
                sortOrderParameter = new ObjectParameter("SortOrder", sortOrder);
            }
            else
            {
                sortOrderParameter = new ObjectParameter("SortOrder", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("CreateModelType", modelCodeParameter, descriptionParameter, sortOrderParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyUser(Nullable<int> userID, string password, string firstName, string lastName, string eMail, string mobile, string imageLocationURL, Nullable<bool> isActive, Nullable<int> roleID, Nullable<bool> defaultPasswordChanged)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
    
            ObjectParameter firstNameParameter;
    
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(string));
            }
    
            ObjectParameter lastNameParameter;
    
            if (lastName != null)
            {
                lastNameParameter = new ObjectParameter("LastName", lastName);
            }
            else
            {
                lastNameParameter = new ObjectParameter("LastName", typeof(string));
            }
    
            ObjectParameter eMailParameter;
    
            if (eMail != null)
            {
                eMailParameter = new ObjectParameter("EMail", eMail);
            }
            else
            {
                eMailParameter = new ObjectParameter("EMail", typeof(string));
            }
    
            ObjectParameter mobileParameter;
    
            if (mobile != null)
            {
                mobileParameter = new ObjectParameter("Mobile", mobile);
            }
            else
            {
                mobileParameter = new ObjectParameter("Mobile", typeof(string));
            }
    
            ObjectParameter imageLocationURLParameter;
    
            if (imageLocationURL != null)
            {
                imageLocationURLParameter = new ObjectParameter("ImageLocationURL", imageLocationURL);
            }
            else
            {
                imageLocationURLParameter = new ObjectParameter("ImageLocationURL", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter roleIDParameter;
    
            if (roleID.HasValue)
            {
                roleIDParameter = new ObjectParameter("RoleID", roleID);
            }
            else
            {
                roleIDParameter = new ObjectParameter("RoleID", typeof(int));
            }
    
            ObjectParameter defaultPasswordChangedParameter;
    
            if (defaultPasswordChanged.HasValue)
            {
                defaultPasswordChangedParameter = new ObjectParameter("DefaultPasswordChanged", defaultPasswordChanged);
            }
            else
            {
                defaultPasswordChangedParameter = new ObjectParameter("DefaultPasswordChanged", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyUser", userIDParameter, passwordParameter, firstNameParameter, lastNameParameter, eMailParameter, mobileParameter, imageLocationURLParameter, isActiveParameter, roleIDParameter, defaultPasswordChangedParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteUser(Nullable<int> userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteUser", userIDParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyModelType(Nullable<int> modelTypeID, string modelCode, string description, Nullable<int> sortOrder, Nullable<bool> isActive)
        {
    
            ObjectParameter modelTypeIDParameter;
    
            if (modelTypeID.HasValue)
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", modelTypeID);
            }
            else
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", typeof(int));
            }
    
            ObjectParameter modelCodeParameter;
    
            if (modelCode != null)
            {
                modelCodeParameter = new ObjectParameter("ModelCode", modelCode);
            }
            else
            {
                modelCodeParameter = new ObjectParameter("ModelCode", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter sortOrderParameter;
    
            if (sortOrder.HasValue)
            {
                sortOrderParameter = new ObjectParameter("SortOrder", sortOrder);
            }
            else
            {
                sortOrderParameter = new ObjectParameter("SortOrder", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyModelType", modelTypeIDParameter, modelCodeParameter, descriptionParameter, sortOrderParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteModelType(Nullable<int> modelTypeID)
        {
    
            ObjectParameter modelTypeIDParameter;
    
            if (modelTypeID.HasValue)
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", modelTypeID);
            }
            else
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteModelType", modelTypeIDParameter);
        }
        public ObjectResult<Nullable<int>> CreateMetal(string metalName, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter metalNameParameter;
    
            if (metalName != null)
            {
                metalNameParameter = new ObjectParameter("MetalName", metalName);
            }
            else
            {
                metalNameParameter = new ObjectParameter("MetalName", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("CreateMetal", metalNameParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyMetal(Nullable<int> metalID, string metalName, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter metalIDParameter;
    
            if (metalID.HasValue)
            {
                metalIDParameter = new ObjectParameter("MetalID", metalID);
            }
            else
            {
                metalIDParameter = new ObjectParameter("MetalID", typeof(int));
            }
    
            ObjectParameter metalNameParameter;
    
            if (metalName != null)
            {
                metalNameParameter = new ObjectParameter("MetalName", metalName);
            }
            else
            {
                metalNameParameter = new ObjectParameter("MetalName", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyMetal", metalIDParameter, metalNameParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteMetal(Nullable<int> metalID)
        {
    
            ObjectParameter metalIDParameter;
    
            if (metalID.HasValue)
            {
                metalIDParameter = new ObjectParameter("MetalID", metalID);
            }
            else
            {
                metalIDParameter = new ObjectParameter("MetalID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteMetal", metalIDParameter);
        }
        public ObjectResult<Metal> GetMetals(Nullable<int> metalID)
        {
    
            ObjectParameter metalIDParameter;
    
            if (metalID.HasValue)
            {
                metalIDParameter = new ObjectParameter("MetalID", metalID);
            }
            else
            {
                metalIDParameter = new ObjectParameter("MetalID", typeof(int));
            }
            return base.ExecuteFunction<Metal>("GetMetals", metalIDParameter);
        }
        public ObjectResult<string> ChangePassword(string username, string password)
        {
    
            ObjectParameter usernameParameter;
    
            if (username != null)
            {
                usernameParameter = new ObjectParameter("Username", username);
            }
            else
            {
                usernameParameter = new ObjectParameter("Username", typeof(string));
            }
    
            ObjectParameter passwordParameter;
    
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(string));
            }
            return base.ExecuteFunction<string>("ChangePassword", usernameParameter, passwordParameter);
        }
        public ObjectResult<ProcessType> GetProcessTypes(Nullable<int> processTypeID)
        {
    
            ObjectParameter processTypeIDParameter;
    
            if (processTypeID.HasValue)
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", processTypeID);
            }
            else
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", typeof(int));
            }
            return base.ExecuteFunction<ProcessType>("GetProcessTypes", processTypeIDParameter);
        }
        public ObjectResult<Nullable<decimal>> CreateProcessType(string type, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter typeParameter;
    
            if (type != null)
            {
                typeParameter = new ObjectParameter("Type", type);
            }
            else
            {
                typeParameter = new ObjectParameter("Type", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<decimal>>("CreateProcessType", typeParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyProcessType(Nullable<int> processTypeID, string type, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter processTypeIDParameter;
    
            if (processTypeID.HasValue)
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", processTypeID);
            }
            else
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", typeof(int));
            }
    
            ObjectParameter typeParameter;
    
            if (type != null)
            {
                typeParameter = new ObjectParameter("Type", type);
            }
            else
            {
                typeParameter = new ObjectParameter("Type", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyProcessType", processTypeIDParameter, typeParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteProcessType(Nullable<int> processTypeID)
        {
    
            ObjectParameter processTypeIDParameter;
    
            if (processTypeID.HasValue)
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", processTypeID);
            }
            else
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteProcessType", processTypeIDParameter);
        }
        public ObjectResult<Nullable<int>> CreateFingerSize(string size, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter sizeParameter;
    
            if (size != null)
            {
                sizeParameter = new ObjectParameter("Size", size);
            }
            else
            {
                sizeParameter = new ObjectParameter("Size", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("CreateFingerSize", sizeParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyFingerSize(Nullable<int> fingerSizeID, string size, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter fingerSizeIDParameter;
    
            if (fingerSizeID.HasValue)
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", fingerSizeID);
            }
            else
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", typeof(int));
            }
    
            ObjectParameter sizeParameter;
    
            if (size != null)
            {
                sizeParameter = new ObjectParameter("Size", size);
            }
            else
            {
                sizeParameter = new ObjectParameter("Size", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyFingerSize", fingerSizeIDParameter, sizeParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteFingerSize(Nullable<int> fingerSizeID)
        {
    
            ObjectParameter fingerSizeIDParameter;
    
            if (fingerSizeID.HasValue)
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", fingerSizeID);
            }
            else
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteFingerSize", fingerSizeIDParameter);
        }
        public ObjectResult<FingerSize> GetFingerSizes(Nullable<int> fingerSizeID)
        {
    
            ObjectParameter fingerSizeIDParameter;
    
            if (fingerSizeID.HasValue)
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", fingerSizeID);
            }
            else
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", typeof(int));
            }
            return base.ExecuteFunction<FingerSize>("GetFingerSizes", fingerSizeIDParameter);
        }
        public ObjectResult<MessageThreads_Result> GetMessageThreads(Nullable<int> userID, Nullable<int> orderID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
            return base.ExecuteFunction<MessageThreads_Result>("GetMessageThreads", userIDParameter, orderIDParameter);
        }
        public ObjectResult<Nullable<decimal>> InsertMessage(Nullable<int> messageThreadID, Nullable<int> sentFromUserID, Nullable<int> assignedTo, Nullable<int> orderID, string subject, string messageText, Nullable<bool> isActive, Nullable<int> status, string attachmentURL, string contentType, Nullable<bool> hasAttachment)
        {
    
            ObjectParameter messageThreadIDParameter;
    
            if (messageThreadID.HasValue)
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", messageThreadID);
            }
            else
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", typeof(int));
            }
    
            ObjectParameter sentFromUserIDParameter;
    
            if (sentFromUserID.HasValue)
            {
                sentFromUserIDParameter = new ObjectParameter("SentFromUserID", sentFromUserID);
            }
            else
            {
                sentFromUserIDParameter = new ObjectParameter("SentFromUserID", typeof(int));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter subjectParameter;
    
            if (subject != null)
            {
                subjectParameter = new ObjectParameter("Subject", subject);
            }
            else
            {
                subjectParameter = new ObjectParameter("Subject", typeof(string));
            }
    
            ObjectParameter messageTextParameter;
    
            if (messageText != null)
            {
                messageTextParameter = new ObjectParameter("MessageText", messageText);
            }
            else
            {
                messageTextParameter = new ObjectParameter("MessageText", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter statusParameter;
    
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(int));
            }
    
            ObjectParameter attachmentURLParameter;
    
            if (attachmentURL != null)
            {
                attachmentURLParameter = new ObjectParameter("AttachmentURL", attachmentURL);
            }
            else
            {
                attachmentURLParameter = new ObjectParameter("AttachmentURL", typeof(string));
            }
    
            ObjectParameter contentTypeParameter;
    
            if (contentType != null)
            {
                contentTypeParameter = new ObjectParameter("ContentType", contentType);
            }
            else
            {
                contentTypeParameter = new ObjectParameter("ContentType", typeof(string));
            }
    
            ObjectParameter hasAttachmentParameter;
    
            if (hasAttachment.HasValue)
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", hasAttachment);
            }
            else
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<decimal>>("InsertMessage", messageThreadIDParameter, sentFromUserIDParameter, assignedToParameter, orderIDParameter, subjectParameter, messageTextParameter, isActiveParameter, statusParameter, attachmentURLParameter, contentTypeParameter, hasAttachmentParameter);
        }
        public ObjectResult<Nullable<bool>> CreateMessage(Nullable<int> messageThreadID, string messageText, Nullable<int> sentFrom, string subject, Nullable<bool> isActive, Nullable<int> hasAttachment)
        {
    
            ObjectParameter messageThreadIDParameter;
    
            if (messageThreadID.HasValue)
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", messageThreadID);
            }
            else
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", typeof(int));
            }
    
            ObjectParameter messageTextParameter;
    
            if (messageText != null)
            {
                messageTextParameter = new ObjectParameter("MessageText", messageText);
            }
            else
            {
                messageTextParameter = new ObjectParameter("MessageText", typeof(string));
            }
    
            ObjectParameter sentFromParameter;
    
            if (sentFrom.HasValue)
            {
                sentFromParameter = new ObjectParameter("SentFrom", sentFrom);
            }
            else
            {
                sentFromParameter = new ObjectParameter("SentFrom", typeof(int));
            }
    
            ObjectParameter subjectParameter;
    
            if (subject != null)
            {
                subjectParameter = new ObjectParameter("Subject", subject);
            }
            else
            {
                subjectParameter = new ObjectParameter("Subject", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter hasAttachmentParameter;
    
            if (hasAttachment.HasValue)
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", hasAttachment);
            }
            else
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("CreateMessage", messageThreadIDParameter, messageTextParameter, sentFromParameter, subjectParameter, isActiveParameter, hasAttachmentParameter);
        }
        public ObjectResult<Messages_Result> GetMessages(Nullable<int> messageThreadID)
        {
    
            ObjectParameter messageThreadIDParameter;
    
            if (messageThreadID.HasValue)
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", messageThreadID);
            }
            else
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", typeof(int));
            }
            return base.ExecuteFunction<Messages_Result>("GetMessages", messageThreadIDParameter);
        }
        public ObjectResult<Priority> GetPriorities(Nullable<int> priorityID)
        {
    
            ObjectParameter priorityIDParameter;
    
            if (priorityID.HasValue)
            {
                priorityIDParameter = new ObjectParameter("PriorityID", priorityID);
            }
            else
            {
                priorityIDParameter = new ObjectParameter("PriorityID", typeof(int));
            }
            return base.ExecuteFunction<Priority>("GetPriorities", priorityIDParameter);
        }
        public ObjectResult<Nullable<bool>> DeletePriority(Nullable<int> priorityID)
        {
    
            ObjectParameter priorityIDParameter;
    
            if (priorityID.HasValue)
            {
                priorityIDParameter = new ObjectParameter("PriorityID", priorityID);
            }
            else
            {
                priorityIDParameter = new ObjectParameter("PriorityID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeletePriority", priorityIDParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyPriority(Nullable<int> priorityID, string name, Nullable<int> frequency, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter priorityIDParameter;
    
            if (priorityID.HasValue)
            {
                priorityIDParameter = new ObjectParameter("PriorityID", priorityID);
            }
            else
            {
                priorityIDParameter = new ObjectParameter("PriorityID", typeof(int));
            }
    
            ObjectParameter nameParameter;
    
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(string));
            }
    
            ObjectParameter frequencyParameter;
    
            if (frequency.HasValue)
            {
                frequencyParameter = new ObjectParameter("Frequency", frequency);
            }
            else
            {
                frequencyParameter = new ObjectParameter("Frequency", typeof(int));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyPriority", priorityIDParameter, nameParameter, frequencyParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> CreatePriority(string name, Nullable<int> frequency, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter nameParameter;
    
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(string));
            }
    
            ObjectParameter frequencyParameter;
    
            if (frequency.HasValue)
            {
                frequencyParameter = new ObjectParameter("Frequency", frequency);
            }
            else
            {
                frequencyParameter = new ObjectParameter("Frequency", typeof(int));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("CreatePriority", nameParameter, frequencyParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<RingType> GetRingTypes(Nullable<int> ringTypeID)
        {
    
            ObjectParameter ringTypeIDParameter;
    
            if (ringTypeID.HasValue)
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", ringTypeID);
            }
            else
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", typeof(int));
            }
            return base.ExecuteFunction<RingType>("GetRingTypes", ringTypeIDParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteRingType(Nullable<int> ringTypeID)
        {
    
            ObjectParameter ringTypeIDParameter;
    
            if (ringTypeID.HasValue)
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", ringTypeID);
            }
            else
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteRingType", ringTypeIDParameter);
        }
        public ObjectResult<Nullable<bool>> CreateRingType(string type, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter typeParameter;
    
            if (type != null)
            {
                typeParameter = new ObjectParameter("Type", type);
            }
            else
            {
                typeParameter = new ObjectParameter("Type", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("CreateRingType", typeParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyRingType(Nullable<int> ringTypeID, string type, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter ringTypeIDParameter;
    
            if (ringTypeID.HasValue)
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", ringTypeID);
            }
            else
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", typeof(int));
            }
    
            ObjectParameter typeParameter;
    
            if (type != null)
            {
                typeParameter = new ObjectParameter("Type", type);
            }
            else
            {
                typeParameter = new ObjectParameter("Type", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyRingType", ringTypeIDParameter, typeParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<OrderParticipants_Result> GetOrderparticipants(Nullable<int> orderID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
            return base.ExecuteFunction<OrderParticipants_Result>("GetOrderparticipants", orderIDParameter);
        }
        public ObjectResult<Nullable<bool>> MarkMessageAsRead(Nullable<int> messageThreadID, Nullable<int> userID, Nullable<bool> hasRead)
        {
    
            ObjectParameter messageThreadIDParameter;
    
            if (messageThreadID.HasValue)
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", messageThreadID);
            }
            else
            {
                messageThreadIDParameter = new ObjectParameter("MessageThreadID", typeof(int));
            }
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter hasReadParameter;
    
            if (hasRead.HasValue)
            {
                hasReadParameter = new ObjectParameter("HasRead", hasRead);
            }
            else
            {
                hasReadParameter = new ObjectParameter("HasRead", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("MarkMessageAsRead", messageThreadIDParameter, userIDParameter, hasReadParameter);
        }
        public ObjectResult<Nullable<int>> CreateOrder(Nullable<int> customerID, Nullable<System.DateTime> expectedShippingDate, Nullable<int> modelTypeID, Nullable<int> modelSubTypeID, string modelNumber, Nullable<int> processTypeID, Nullable<int> metalID, string metalOther, Nullable<int> fingerSizeID, string fingerSizeOther, string quantity, string quantityOther, Nullable<decimal> length, string lengthMeasurement, Nullable<int> priorityID, Nullable<bool> makeExactCopies, Nullable<int> ringTypeID, Nullable<bool> isExistingModel, string modelToMatch, string curveType, string tailoredType, Nullable<bool> isFinishAtSomePoint, string additionalInfo, Nullable<bool> isPF, string headSize, Nullable<bool> isCADRequested, Nullable<bool> isSampleProvided, Nullable<byte> noOfSamples, Nullable<bool> makeExactCopiesSample, Nullable<bool> isStoneProvided, string stoneDescription, string settingInstructions, string remarks, Nullable<int> assignedTo, Nullable<int> tMUserID, Nullable<int> orderStatusID, Nullable<int> createdByUserID, string specimenData)
        {
    
            ObjectParameter customerIDParameter;
    
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(int));
            }
    
            ObjectParameter expectedShippingDateParameter;
    
            if (expectedShippingDate.HasValue)
            {
                expectedShippingDateParameter = new ObjectParameter("ExpectedShippingDate", expectedShippingDate);
            }
            else
            {
                expectedShippingDateParameter = new ObjectParameter("ExpectedShippingDate", typeof(System.DateTime));
            }
    
            ObjectParameter modelTypeIDParameter;
    
            if (modelTypeID.HasValue)
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", modelTypeID);
            }
            else
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", typeof(int));
            }
    
            ObjectParameter modelSubTypeIDParameter;
    
            if (modelSubTypeID.HasValue)
            {
                modelSubTypeIDParameter = new ObjectParameter("ModelSubTypeID", modelSubTypeID);
            }
            else
            {
                modelSubTypeIDParameter = new ObjectParameter("ModelSubTypeID", typeof(int));
            }
    
            ObjectParameter modelNumberParameter;
    
            if (modelNumber != null)
            {
                modelNumberParameter = new ObjectParameter("ModelNumber", modelNumber);
            }
            else
            {
                modelNumberParameter = new ObjectParameter("ModelNumber", typeof(string));
            }
    
            ObjectParameter processTypeIDParameter;
    
            if (processTypeID.HasValue)
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", processTypeID);
            }
            else
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", typeof(int));
            }
    
            ObjectParameter metalIDParameter;
    
            if (metalID.HasValue)
            {
                metalIDParameter = new ObjectParameter("MetalID", metalID);
            }
            else
            {
                metalIDParameter = new ObjectParameter("MetalID", typeof(int));
            }
    
            ObjectParameter metalOtherParameter;
    
            if (metalOther != null)
            {
                metalOtherParameter = new ObjectParameter("MetalOther", metalOther);
            }
            else
            {
                metalOtherParameter = new ObjectParameter("MetalOther", typeof(string));
            }
    
            ObjectParameter fingerSizeIDParameter;
    
            if (fingerSizeID.HasValue)
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", fingerSizeID);
            }
            else
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", typeof(int));
            }
    
            ObjectParameter fingerSizeOtherParameter;
    
            if (fingerSizeOther != null)
            {
                fingerSizeOtherParameter = new ObjectParameter("FingerSizeOther", fingerSizeOther);
            }
            else
            {
                fingerSizeOtherParameter = new ObjectParameter("FingerSizeOther", typeof(string));
            }
    
            ObjectParameter quantityParameter;
    
            if (quantity != null)
            {
                quantityParameter = new ObjectParameter("Quantity", quantity);
            }
            else
            {
                quantityParameter = new ObjectParameter("Quantity", typeof(string));
            }
    
            ObjectParameter quantityOtherParameter;
    
            if (quantityOther != null)
            {
                quantityOtherParameter = new ObjectParameter("QuantityOther", quantityOther);
            }
            else
            {
                quantityOtherParameter = new ObjectParameter("QuantityOther", typeof(string));
            }
    
            ObjectParameter lengthParameter;
    
            if (length.HasValue)
            {
                lengthParameter = new ObjectParameter("Length", length);
            }
            else
            {
                lengthParameter = new ObjectParameter("Length", typeof(decimal));
            }
    
            ObjectParameter lengthMeasurementParameter;
    
            if (lengthMeasurement != null)
            {
                lengthMeasurementParameter = new ObjectParameter("LengthMeasurement", lengthMeasurement);
            }
            else
            {
                lengthMeasurementParameter = new ObjectParameter("LengthMeasurement", typeof(string));
            }
    
            ObjectParameter priorityIDParameter;
    
            if (priorityID.HasValue)
            {
                priorityIDParameter = new ObjectParameter("PriorityID", priorityID);
            }
            else
            {
                priorityIDParameter = new ObjectParameter("PriorityID", typeof(int));
            }
    
            ObjectParameter makeExactCopiesParameter;
    
            if (makeExactCopies.HasValue)
            {
                makeExactCopiesParameter = new ObjectParameter("MakeExactCopies", makeExactCopies);
            }
            else
            {
                makeExactCopiesParameter = new ObjectParameter("MakeExactCopies", typeof(bool));
            }
    
            ObjectParameter ringTypeIDParameter;
    
            if (ringTypeID.HasValue)
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", ringTypeID);
            }
            else
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", typeof(int));
            }
    
            ObjectParameter isExistingModelParameter;
    
            if (isExistingModel.HasValue)
            {
                isExistingModelParameter = new ObjectParameter("IsExistingModel", isExistingModel);
            }
            else
            {
                isExistingModelParameter = new ObjectParameter("IsExistingModel", typeof(bool));
            }
    
            ObjectParameter modelToMatchParameter;
    
            if (modelToMatch != null)
            {
                modelToMatchParameter = new ObjectParameter("ModelToMatch", modelToMatch);
            }
            else
            {
                modelToMatchParameter = new ObjectParameter("ModelToMatch", typeof(string));
            }
    
            ObjectParameter curveTypeParameter;
    
            if (curveType != null)
            {
                curveTypeParameter = new ObjectParameter("CurveType", curveType);
            }
            else
            {
                curveTypeParameter = new ObjectParameter("CurveType", typeof(string));
            }
    
            ObjectParameter tailoredTypeParameter;
    
            if (tailoredType != null)
            {
                tailoredTypeParameter = new ObjectParameter("TailoredType", tailoredType);
            }
            else
            {
                tailoredTypeParameter = new ObjectParameter("TailoredType", typeof(string));
            }
    
            ObjectParameter isFinishAtSomePointParameter;
    
            if (isFinishAtSomePoint.HasValue)
            {
                isFinishAtSomePointParameter = new ObjectParameter("IsFinishAtSomePoint", isFinishAtSomePoint);
            }
            else
            {
                isFinishAtSomePointParameter = new ObjectParameter("IsFinishAtSomePoint", typeof(bool));
            }
    
            ObjectParameter additionalInfoParameter;
    
            if (additionalInfo != null)
            {
                additionalInfoParameter = new ObjectParameter("AdditionalInfo", additionalInfo);
            }
            else
            {
                additionalInfoParameter = new ObjectParameter("AdditionalInfo", typeof(string));
            }
    
            ObjectParameter isPFParameter;
    
            if (isPF.HasValue)
            {
                isPFParameter = new ObjectParameter("IsPF", isPF);
            }
            else
            {
                isPFParameter = new ObjectParameter("IsPF", typeof(bool));
            }
    
            ObjectParameter headSizeParameter;
    
            if (headSize != null)
            {
                headSizeParameter = new ObjectParameter("HeadSize", headSize);
            }
            else
            {
                headSizeParameter = new ObjectParameter("HeadSize", typeof(string));
            }
    
            ObjectParameter isCADRequestedParameter;
    
            if (isCADRequested.HasValue)
            {
                isCADRequestedParameter = new ObjectParameter("IsCADRequested", isCADRequested);
            }
            else
            {
                isCADRequestedParameter = new ObjectParameter("IsCADRequested", typeof(bool));
            }
    
            ObjectParameter isSampleProvidedParameter;
    
            if (isSampleProvided.HasValue)
            {
                isSampleProvidedParameter = new ObjectParameter("IsSampleProvided", isSampleProvided);
            }
            else
            {
                isSampleProvidedParameter = new ObjectParameter("IsSampleProvided", typeof(bool));
            }
    
            ObjectParameter noOfSamplesParameter;
    
            if (noOfSamples.HasValue)
            {
                noOfSamplesParameter = new ObjectParameter("NoOfSamples", noOfSamples);
            }
            else
            {
                noOfSamplesParameter = new ObjectParameter("NoOfSamples", typeof(byte));
            }
    
            ObjectParameter makeExactCopiesSampleParameter;
    
            if (makeExactCopiesSample.HasValue)
            {
                makeExactCopiesSampleParameter = new ObjectParameter("MakeExactCopiesSample", makeExactCopiesSample);
            }
            else
            {
                makeExactCopiesSampleParameter = new ObjectParameter("MakeExactCopiesSample", typeof(bool));
            }
    
            ObjectParameter isStoneProvidedParameter;
    
            if (isStoneProvided.HasValue)
            {
                isStoneProvidedParameter = new ObjectParameter("IsStoneProvided", isStoneProvided);
            }
            else
            {
                isStoneProvidedParameter = new ObjectParameter("IsStoneProvided", typeof(bool));
            }
    
            ObjectParameter stoneDescriptionParameter;
    
            if (stoneDescription != null)
            {
                stoneDescriptionParameter = new ObjectParameter("StoneDescription", stoneDescription);
            }
            else
            {
                stoneDescriptionParameter = new ObjectParameter("StoneDescription", typeof(string));
            }
    
            ObjectParameter settingInstructionsParameter;
    
            if (settingInstructions != null)
            {
                settingInstructionsParameter = new ObjectParameter("SettingInstructions", settingInstructions);
            }
            else
            {
                settingInstructionsParameter = new ObjectParameter("SettingInstructions", typeof(string));
            }
    
            ObjectParameter remarksParameter;
    
            if (remarks != null)
            {
                remarksParameter = new ObjectParameter("Remarks", remarks);
            }
            else
            {
                remarksParameter = new ObjectParameter("Remarks", typeof(string));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter tMUserIDParameter;
    
            if (tMUserID.HasValue)
            {
                tMUserIDParameter = new ObjectParameter("TMUserID", tMUserID);
            }
            else
            {
                tMUserIDParameter = new ObjectParameter("TMUserID", typeof(int));
            }
    
            ObjectParameter orderStatusIDParameter;
    
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(int));
            }
    
            ObjectParameter createdByUserIDParameter;
    
            if (createdByUserID.HasValue)
            {
                createdByUserIDParameter = new ObjectParameter("CreatedByUserID", createdByUserID);
            }
            else
            {
                createdByUserIDParameter = new ObjectParameter("CreatedByUserID", typeof(int));
            }
    
            ObjectParameter specimenDataParameter;
    
            if (specimenData != null)
            {
                specimenDataParameter = new ObjectParameter("SpecimenData", specimenData);
            }
            else
            {
                specimenDataParameter = new ObjectParameter("SpecimenData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CreateOrder", customerIDParameter, expectedShippingDateParameter, modelTypeIDParameter, modelSubTypeIDParameter, modelNumberParameter, processTypeIDParameter, metalIDParameter, metalOtherParameter, fingerSizeIDParameter, fingerSizeOtherParameter, quantityParameter, quantityOtherParameter, lengthParameter, lengthMeasurementParameter, priorityIDParameter, makeExactCopiesParameter, ringTypeIDParameter, isExistingModelParameter, modelToMatchParameter, curveTypeParameter, tailoredTypeParameter, isFinishAtSomePointParameter, additionalInfoParameter, isPFParameter, headSizeParameter, isCADRequestedParameter, isSampleProvidedParameter, noOfSamplesParameter, makeExactCopiesSampleParameter, isStoneProvidedParameter, stoneDescriptionParameter, settingInstructionsParameter, remarksParameter, assignedToParameter, tMUserIDParameter, orderStatusIDParameter, createdByUserIDParameter, specimenDataParameter);
        }
        public ObjectResult<Customer> GetCustomers(Nullable<int> customerID)
        {
    
            ObjectParameter customerIDParameter;
    
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(int));
            }
            return base.ExecuteFunction<Customer>("GetCustomers", customerIDParameter);
        }
        public ObjectResult<string> GetAndSetSerialNumber(ObjectParameter serialNumber)
        {
            return base.ExecuteFunction<string>("GetAndSetSerialNumber", serialNumber);
        }
        public ObjectResult<Orders_Result> GetOrders(Nullable<int> assignedTo, Nullable<int> orderStatusID, Nullable<int> userID)
        {
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter orderStatusIDParameter;
    
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(int));
            }
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<Orders_Result>("GetOrders", assignedToParameter, orderStatusIDParameter, userIDParameter);
        }
        public ObjectResult<OrderDetails_Result> GetOrderDetails(Nullable<int> orderID, Nullable<int> userID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<OrderDetails_Result>("GetOrderDetails", orderIDParameter, userIDParameter);
        }
        public ObjectResult<OrdersCAD> GetOrderCADs(Nullable<int> orderID, Nullable<int> cADID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter cADIDParameter;
    
            if (cADID.HasValue)
            {
                cADIDParameter = new ObjectParameter("CADID", cADID);
            }
            else
            {
                cADIDParameter = new ObjectParameter("CADID", typeof(int));
            }
            return base.ExecuteFunction<OrdersCAD>("GetOrderCADs", orderIDParameter, cADIDParameter);
        }
        public ObjectResult<OrderStatu> GetStatuses(Nullable<int> statusID)
        {
    
            ObjectParameter statusIDParameter;
    
            if (statusID.HasValue)
            {
                statusIDParameter = new ObjectParameter("StatusID", statusID);
            }
            else
            {
                statusIDParameter = new ObjectParameter("StatusID", typeof(int));
            }
            return base.ExecuteFunction<OrderStatu>("GetStatuses", statusIDParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyOrder(Nullable<int> orderID, Nullable<int> customerID, Nullable<int> modelTypeID, Nullable<int> modelSubTypeID, string modelNumber, Nullable<int> processTypeID, Nullable<int> metalID, string metalOther, Nullable<int> fingerSizeID, string fingerSizeOther, string quantity, string quantityOther, Nullable<decimal> length, string lengthMeasurement, Nullable<int> priorityID, Nullable<bool> makeExactCopies, Nullable<int> ringTypeID, Nullable<bool> isExistingModel, string modelToMatch, string curveType, string tailoredType, Nullable<bool> isFinishAtSomePoint, string additionalInfo, Nullable<bool> isPF, string headSize, Nullable<bool> isCADRequested, Nullable<bool> isSampleProvided, Nullable<byte> noOfSamples, Nullable<bool> makeExactCopiesSample, Nullable<bool> isStoneProvided, string stoneDescription, string settingInstructions, string remarks, Nullable<int> assignedTo, Nullable<int> tMUserID, Nullable<int> orderStatusID, string specimenData)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter customerIDParameter;
    
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(int));
            }
    
            ObjectParameter modelTypeIDParameter;
    
            if (modelTypeID.HasValue)
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", modelTypeID);
            }
            else
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", typeof(int));
            }
    
            ObjectParameter modelSubTypeIDParameter;
    
            if (modelSubTypeID.HasValue)
            {
                modelSubTypeIDParameter = new ObjectParameter("ModelSubTypeID", modelSubTypeID);
            }
            else
            {
                modelSubTypeIDParameter = new ObjectParameter("ModelSubTypeID", typeof(int));
            }
    
            ObjectParameter modelNumberParameter;
    
            if (modelNumber != null)
            {
                modelNumberParameter = new ObjectParameter("ModelNumber", modelNumber);
            }
            else
            {
                modelNumberParameter = new ObjectParameter("ModelNumber", typeof(string));
            }
    
            ObjectParameter processTypeIDParameter;
    
            if (processTypeID.HasValue)
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", processTypeID);
            }
            else
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", typeof(int));
            }
    
            ObjectParameter metalIDParameter;
    
            if (metalID.HasValue)
            {
                metalIDParameter = new ObjectParameter("MetalID", metalID);
            }
            else
            {
                metalIDParameter = new ObjectParameter("MetalID", typeof(int));
            }
    
            ObjectParameter metalOtherParameter;
    
            if (metalOther != null)
            {
                metalOtherParameter = new ObjectParameter("MetalOther", metalOther);
            }
            else
            {
                metalOtherParameter = new ObjectParameter("MetalOther", typeof(string));
            }
    
            ObjectParameter fingerSizeIDParameter;
    
            if (fingerSizeID.HasValue)
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", fingerSizeID);
            }
            else
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", typeof(int));
            }
    
            ObjectParameter fingerSizeOtherParameter;
    
            if (fingerSizeOther != null)
            {
                fingerSizeOtherParameter = new ObjectParameter("FingerSizeOther", fingerSizeOther);
            }
            else
            {
                fingerSizeOtherParameter = new ObjectParameter("FingerSizeOther", typeof(string));
            }
    
            ObjectParameter quantityParameter;
    
            if (quantity != null)
            {
                quantityParameter = new ObjectParameter("Quantity", quantity);
            }
            else
            {
                quantityParameter = new ObjectParameter("Quantity", typeof(string));
            }
    
            ObjectParameter quantityOtherParameter;
    
            if (quantityOther != null)
            {
                quantityOtherParameter = new ObjectParameter("QuantityOther", quantityOther);
            }
            else
            {
                quantityOtherParameter = new ObjectParameter("QuantityOther", typeof(string));
            }
    
            ObjectParameter lengthParameter;
    
            if (length.HasValue)
            {
                lengthParameter = new ObjectParameter("Length", length);
            }
            else
            {
                lengthParameter = new ObjectParameter("Length", typeof(decimal));
            }
    
            ObjectParameter lengthMeasurementParameter;
    
            if (lengthMeasurement != null)
            {
                lengthMeasurementParameter = new ObjectParameter("LengthMeasurement", lengthMeasurement);
            }
            else
            {
                lengthMeasurementParameter = new ObjectParameter("LengthMeasurement", typeof(string));
            }
    
            ObjectParameter priorityIDParameter;
    
            if (priorityID.HasValue)
            {
                priorityIDParameter = new ObjectParameter("PriorityID", priorityID);
            }
            else
            {
                priorityIDParameter = new ObjectParameter("PriorityID", typeof(int));
            }
    
            ObjectParameter makeExactCopiesParameter;
    
            if (makeExactCopies.HasValue)
            {
                makeExactCopiesParameter = new ObjectParameter("MakeExactCopies", makeExactCopies);
            }
            else
            {
                makeExactCopiesParameter = new ObjectParameter("MakeExactCopies", typeof(bool));
            }
    
            ObjectParameter ringTypeIDParameter;
    
            if (ringTypeID.HasValue)
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", ringTypeID);
            }
            else
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", typeof(int));
            }
    
            ObjectParameter isExistingModelParameter;
    
            if (isExistingModel.HasValue)
            {
                isExistingModelParameter = new ObjectParameter("IsExistingModel", isExistingModel);
            }
            else
            {
                isExistingModelParameter = new ObjectParameter("IsExistingModel", typeof(bool));
            }
    
            ObjectParameter modelToMatchParameter;
    
            if (modelToMatch != null)
            {
                modelToMatchParameter = new ObjectParameter("ModelToMatch", modelToMatch);
            }
            else
            {
                modelToMatchParameter = new ObjectParameter("ModelToMatch", typeof(string));
            }
    
            ObjectParameter curveTypeParameter;
    
            if (curveType != null)
            {
                curveTypeParameter = new ObjectParameter("CurveType", curveType);
            }
            else
            {
                curveTypeParameter = new ObjectParameter("CurveType", typeof(string));
            }
    
            ObjectParameter tailoredTypeParameter;
    
            if (tailoredType != null)
            {
                tailoredTypeParameter = new ObjectParameter("TailoredType", tailoredType);
            }
            else
            {
                tailoredTypeParameter = new ObjectParameter("TailoredType", typeof(string));
            }
    
            ObjectParameter isFinishAtSomePointParameter;
    
            if (isFinishAtSomePoint.HasValue)
            {
                isFinishAtSomePointParameter = new ObjectParameter("IsFinishAtSomePoint", isFinishAtSomePoint);
            }
            else
            {
                isFinishAtSomePointParameter = new ObjectParameter("IsFinishAtSomePoint", typeof(bool));
            }
    
            ObjectParameter additionalInfoParameter;
    
            if (additionalInfo != null)
            {
                additionalInfoParameter = new ObjectParameter("AdditionalInfo", additionalInfo);
            }
            else
            {
                additionalInfoParameter = new ObjectParameter("AdditionalInfo", typeof(string));
            }
    
            ObjectParameter isPFParameter;
    
            if (isPF.HasValue)
            {
                isPFParameter = new ObjectParameter("IsPF", isPF);
            }
            else
            {
                isPFParameter = new ObjectParameter("IsPF", typeof(bool));
            }
    
            ObjectParameter headSizeParameter;
    
            if (headSize != null)
            {
                headSizeParameter = new ObjectParameter("HeadSize", headSize);
            }
            else
            {
                headSizeParameter = new ObjectParameter("HeadSize", typeof(string));
            }
    
            ObjectParameter isCADRequestedParameter;
    
            if (isCADRequested.HasValue)
            {
                isCADRequestedParameter = new ObjectParameter("IsCADRequested", isCADRequested);
            }
            else
            {
                isCADRequestedParameter = new ObjectParameter("IsCADRequested", typeof(bool));
            }
    
            ObjectParameter isSampleProvidedParameter;
    
            if (isSampleProvided.HasValue)
            {
                isSampleProvidedParameter = new ObjectParameter("IsSampleProvided", isSampleProvided);
            }
            else
            {
                isSampleProvidedParameter = new ObjectParameter("IsSampleProvided", typeof(bool));
            }
    
            ObjectParameter noOfSamplesParameter;
    
            if (noOfSamples.HasValue)
            {
                noOfSamplesParameter = new ObjectParameter("NoOfSamples", noOfSamples);
            }
            else
            {
                noOfSamplesParameter = new ObjectParameter("NoOfSamples", typeof(byte));
            }
    
            ObjectParameter makeExactCopiesSampleParameter;
    
            if (makeExactCopiesSample.HasValue)
            {
                makeExactCopiesSampleParameter = new ObjectParameter("MakeExactCopiesSample", makeExactCopiesSample);
            }
            else
            {
                makeExactCopiesSampleParameter = new ObjectParameter("MakeExactCopiesSample", typeof(bool));
            }
    
            ObjectParameter isStoneProvidedParameter;
    
            if (isStoneProvided.HasValue)
            {
                isStoneProvidedParameter = new ObjectParameter("IsStoneProvided", isStoneProvided);
            }
            else
            {
                isStoneProvidedParameter = new ObjectParameter("IsStoneProvided", typeof(bool));
            }
    
            ObjectParameter stoneDescriptionParameter;
    
            if (stoneDescription != null)
            {
                stoneDescriptionParameter = new ObjectParameter("StoneDescription", stoneDescription);
            }
            else
            {
                stoneDescriptionParameter = new ObjectParameter("StoneDescription", typeof(string));
            }
    
            ObjectParameter settingInstructionsParameter;
    
            if (settingInstructions != null)
            {
                settingInstructionsParameter = new ObjectParameter("SettingInstructions", settingInstructions);
            }
            else
            {
                settingInstructionsParameter = new ObjectParameter("SettingInstructions", typeof(string));
            }
    
            ObjectParameter remarksParameter;
    
            if (remarks != null)
            {
                remarksParameter = new ObjectParameter("Remarks", remarks);
            }
            else
            {
                remarksParameter = new ObjectParameter("Remarks", typeof(string));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter tMUserIDParameter;
    
            if (tMUserID.HasValue)
            {
                tMUserIDParameter = new ObjectParameter("TMUserID", tMUserID);
            }
            else
            {
                tMUserIDParameter = new ObjectParameter("TMUserID", typeof(int));
            }
    
            ObjectParameter orderStatusIDParameter;
    
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(int));
            }
    
            ObjectParameter specimenDataParameter;
    
            if (specimenData != null)
            {
                specimenDataParameter = new ObjectParameter("SpecimenData", specimenData);
            }
            else
            {
                specimenDataParameter = new ObjectParameter("SpecimenData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyOrder", orderIDParameter, customerIDParameter, modelTypeIDParameter, modelSubTypeIDParameter, modelNumberParameter, processTypeIDParameter, metalIDParameter, metalOtherParameter, fingerSizeIDParameter, fingerSizeOtherParameter, quantityParameter, quantityOtherParameter, lengthParameter, lengthMeasurementParameter, priorityIDParameter, makeExactCopiesParameter, ringTypeIDParameter, isExistingModelParameter, modelToMatchParameter, curveTypeParameter, tailoredTypeParameter, isFinishAtSomePointParameter, additionalInfoParameter, isPFParameter, headSizeParameter, isCADRequestedParameter, isSampleProvidedParameter, noOfSamplesParameter, makeExactCopiesSampleParameter, isStoneProvidedParameter, stoneDescriptionParameter, settingInstructionsParameter, remarksParameter, assignedToParameter, tMUserIDParameter, orderStatusIDParameter, specimenDataParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyOrderDetails(Nullable<int> orderID, Nullable<bool> updateCADInfo, Nullable<bool> uploadSampleInfo, Nullable<int> cADID, string cADLocationURL, Nullable<int> uploadedBy, Nullable<bool> isApproved, string remarks, string changeInstructions, Nullable<int> assignTo, Nullable<int> statusID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter updateCADInfoParameter;
    
            if (updateCADInfo.HasValue)
            {
                updateCADInfoParameter = new ObjectParameter("UpdateCADInfo", updateCADInfo);
            }
            else
            {
                updateCADInfoParameter = new ObjectParameter("UpdateCADInfo", typeof(bool));
            }
    
            ObjectParameter uploadSampleInfoParameter;
    
            if (uploadSampleInfo.HasValue)
            {
                uploadSampleInfoParameter = new ObjectParameter("UploadSampleInfo", uploadSampleInfo);
            }
            else
            {
                uploadSampleInfoParameter = new ObjectParameter("UploadSampleInfo", typeof(bool));
            }
    
            ObjectParameter cADIDParameter;
    
            if (cADID.HasValue)
            {
                cADIDParameter = new ObjectParameter("CADID", cADID);
            }
            else
            {
                cADIDParameter = new ObjectParameter("CADID", typeof(int));
            }
    
            ObjectParameter cADLocationURLParameter;
    
            if (cADLocationURL != null)
            {
                cADLocationURLParameter = new ObjectParameter("CADLocationURL", cADLocationURL);
            }
            else
            {
                cADLocationURLParameter = new ObjectParameter("CADLocationURL", typeof(string));
            }
    
            ObjectParameter uploadedByParameter;
    
            if (uploadedBy.HasValue)
            {
                uploadedByParameter = new ObjectParameter("UploadedBy", uploadedBy);
            }
            else
            {
                uploadedByParameter = new ObjectParameter("UploadedBy", typeof(int));
            }
    
            ObjectParameter isApprovedParameter;
    
            if (isApproved.HasValue)
            {
                isApprovedParameter = new ObjectParameter("IsApproved", isApproved);
            }
            else
            {
                isApprovedParameter = new ObjectParameter("IsApproved", typeof(bool));
            }
    
            ObjectParameter remarksParameter;
    
            if (remarks != null)
            {
                remarksParameter = new ObjectParameter("Remarks", remarks);
            }
            else
            {
                remarksParameter = new ObjectParameter("Remarks", typeof(string));
            }
    
            ObjectParameter changeInstructionsParameter;
    
            if (changeInstructions != null)
            {
                changeInstructionsParameter = new ObjectParameter("ChangeInstructions", changeInstructions);
            }
            else
            {
                changeInstructionsParameter = new ObjectParameter("ChangeInstructions", typeof(string));
            }
    
            ObjectParameter assignToParameter;
    
            if (assignTo.HasValue)
            {
                assignToParameter = new ObjectParameter("AssignTo", assignTo);
            }
            else
            {
                assignToParameter = new ObjectParameter("AssignTo", typeof(int));
            }
    
            ObjectParameter statusIDParameter;
    
            if (statusID.HasValue)
            {
                statusIDParameter = new ObjectParameter("StatusID", statusID);
            }
            else
            {
                statusIDParameter = new ObjectParameter("StatusID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyOrderDetails", orderIDParameter, updateCADInfoParameter, uploadSampleInfoParameter, cADIDParameter, cADLocationURLParameter, uploadedByParameter, isApprovedParameter, remarksParameter, changeInstructionsParameter, assignToParameter, statusIDParameter);
        }
        public ObjectResult<Nullable<bool>> UpdateOrderStatus(Nullable<int> orderID, Nullable<int> orderStatusID, string changeInstructions, Nullable<bool> updateCADInfo, Nullable<int> cADID, Nullable<bool> isApproved, Nullable<bool> isUpdatedByCustomer, string changeInstructionsCustomer)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter orderStatusIDParameter;
    
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(int));
            }
    
            ObjectParameter changeInstructionsParameter;
    
            if (changeInstructions != null)
            {
                changeInstructionsParameter = new ObjectParameter("ChangeInstructions", changeInstructions);
            }
            else
            {
                changeInstructionsParameter = new ObjectParameter("ChangeInstructions", typeof(string));
            }
    
            ObjectParameter updateCADInfoParameter;
    
            if (updateCADInfo.HasValue)
            {
                updateCADInfoParameter = new ObjectParameter("UpdateCADInfo", updateCADInfo);
            }
            else
            {
                updateCADInfoParameter = new ObjectParameter("UpdateCADInfo", typeof(bool));
            }
    
            ObjectParameter cADIDParameter;
    
            if (cADID.HasValue)
            {
                cADIDParameter = new ObjectParameter("CADID", cADID);
            }
            else
            {
                cADIDParameter = new ObjectParameter("CADID", typeof(int));
            }
    
            ObjectParameter isApprovedParameter;
    
            if (isApproved.HasValue)
            {
                isApprovedParameter = new ObjectParameter("IsApproved", isApproved);
            }
            else
            {
                isApprovedParameter = new ObjectParameter("IsApproved", typeof(bool));
            }
    
            ObjectParameter isUpdatedByCustomerParameter;
    
            if (isUpdatedByCustomer.HasValue)
            {
                isUpdatedByCustomerParameter = new ObjectParameter("IsUpdatedByCustomer", isUpdatedByCustomer);
            }
            else
            {
                isUpdatedByCustomerParameter = new ObjectParameter("IsUpdatedByCustomer", typeof(bool));
            }
    
            ObjectParameter changeInstructionsCustomerParameter;
    
            if (changeInstructionsCustomer != null)
            {
                changeInstructionsCustomerParameter = new ObjectParameter("ChangeInstructionsCustomer", changeInstructionsCustomer);
            }
            else
            {
                changeInstructionsCustomerParameter = new ObjectParameter("ChangeInstructionsCustomer", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("UpdateOrderStatus", orderIDParameter, orderStatusIDParameter, changeInstructionsParameter, updateCADInfoParameter, cADIDParameter, isApprovedParameter, isUpdatedByCustomerParameter, changeInstructionsCustomerParameter);
        }
        public ObjectResult<DashboardData_Result> GetDashboardData(Nullable<int> userID, Nullable<int> deadlineInDays, Nullable<int> assignedToID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter deadlineInDaysParameter;
    
            if (deadlineInDays.HasValue)
            {
                deadlineInDaysParameter = new ObjectParameter("DeadlineInDays", deadlineInDays);
            }
            else
            {
                deadlineInDaysParameter = new ObjectParameter("DeadlineInDays", typeof(int));
            }
    
            ObjectParameter assignedToIDParameter;
    
            if (assignedToID.HasValue)
            {
                assignedToIDParameter = new ObjectParameter("AssignedToID", assignedToID);
            }
            else
            {
                assignedToIDParameter = new ObjectParameter("AssignedToID", typeof(int));
            }
            return base.ExecuteFunction<DashboardData_Result>("GetDashboardData", userIDParameter, deadlineInDaysParameter, assignedToIDParameter);
        }
        public ObjectResult<Messages_Result> GetUnReadMessages(Nullable<int> userID, Nullable<bool> hasRead)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter hasReadParameter;
    
            if (hasRead.HasValue)
            {
                hasReadParameter = new ObjectParameter("HasRead", hasRead);
            }
            else
            {
                hasReadParameter = new ObjectParameter("HasRead", typeof(bool));
            }
            return base.ExecuteFunction<Messages_Result>("GetUnReadMessages", userIDParameter, hasReadParameter);
        }
        public ObjectResult<Messages_Result> GetMessagesByAssignment(Nullable<int> userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<Messages_Result>("GetMessagesByAssignment", userIDParameter);
        }
        public ObjectResult<Sample> GetSamples(Nullable<int> orderID, Nullable<int> sampleID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter sampleIDParameter;
    
            if (sampleID.HasValue)
            {
                sampleIDParameter = new ObjectParameter("SampleID", sampleID);
            }
            else
            {
                sampleIDParameter = new ObjectParameter("SampleID", typeof(int));
            }
            return base.ExecuteFunction<Sample>("GetSamples", orderIDParameter, sampleIDParameter);
        }
        public ObjectResult<Nullable<bool>> UpdateSampleInfo(Nullable<int> sampleID, string sampleSerialNumber, Nullable<bool> isActive, Nullable<bool> isReturned, Nullable<bool> isConfirmed, Nullable<int> confirmedBy, Nullable<System.DateTime> returnedDate)
        {
    
            ObjectParameter sampleIDParameter;
    
            if (sampleID.HasValue)
            {
                sampleIDParameter = new ObjectParameter("SampleID", sampleID);
            }
            else
            {
                sampleIDParameter = new ObjectParameter("SampleID", typeof(int));
            }
    
            ObjectParameter sampleSerialNumberParameter;
    
            if (sampleSerialNumber != null)
            {
                sampleSerialNumberParameter = new ObjectParameter("SampleSerialNumber", sampleSerialNumber);
            }
            else
            {
                sampleSerialNumberParameter = new ObjectParameter("SampleSerialNumber", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter isReturnedParameter;
    
            if (isReturned.HasValue)
            {
                isReturnedParameter = new ObjectParameter("IsReturned", isReturned);
            }
            else
            {
                isReturnedParameter = new ObjectParameter("IsReturned", typeof(bool));
            }
    
            ObjectParameter isConfirmedParameter;
    
            if (isConfirmed.HasValue)
            {
                isConfirmedParameter = new ObjectParameter("IsConfirmed", isConfirmed);
            }
            else
            {
                isConfirmedParameter = new ObjectParameter("IsConfirmed", typeof(bool));
            }
    
            ObjectParameter confirmedByParameter;
    
            if (confirmedBy.HasValue)
            {
                confirmedByParameter = new ObjectParameter("ConfirmedBy", confirmedBy);
            }
            else
            {
                confirmedByParameter = new ObjectParameter("ConfirmedBy", typeof(int));
            }
    
            ObjectParameter returnedDateParameter;
    
            if (returnedDate.HasValue)
            {
                returnedDateParameter = new ObjectParameter("ReturnedDate", returnedDate);
            }
            else
            {
                returnedDateParameter = new ObjectParameter("ReturnedDate", typeof(System.DateTime));
            }
            return base.ExecuteFunction<Nullable<bool>>("UpdateSampleInfo", sampleIDParameter, sampleSerialNumberParameter, isActiveParameter, isReturnedParameter, isConfirmedParameter, confirmedByParameter, returnedDateParameter);
        }
        public ObjectResult<Specimen> GetSpecimens(Nullable<int> specimenID, Nullable<int> orderID, Nullable<int> messageID)
        {
    
            ObjectParameter specimenIDParameter;
    
            if (specimenID.HasValue)
            {
                specimenIDParameter = new ObjectParameter("SpecimenID", specimenID);
            }
            else
            {
                specimenIDParameter = new ObjectParameter("SpecimenID", typeof(int));
            }
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter messageIDParameter;
    
            if (messageID.HasValue)
            {
                messageIDParameter = new ObjectParameter("MessageID", messageID);
            }
            else
            {
                messageIDParameter = new ObjectParameter("MessageID", typeof(int));
            }
            return base.ExecuteFunction<Specimen>("GetSpecimens", specimenIDParameter, orderIDParameter, messageIDParameter);
        }
        public ObjectResult<Nullable<bool>> CreateCustomer(string customerCode, string referenceCode, string customerName, string customerEmail)
        {
    
            ObjectParameter customerCodeParameter;
    
            if (customerCode != null)
            {
                customerCodeParameter = new ObjectParameter("CustomerCode", customerCode);
            }
            else
            {
                customerCodeParameter = new ObjectParameter("CustomerCode", typeof(string));
            }
    
            ObjectParameter referenceCodeParameter;
    
            if (referenceCode != null)
            {
                referenceCodeParameter = new ObjectParameter("ReferenceCode", referenceCode);
            }
            else
            {
                referenceCodeParameter = new ObjectParameter("ReferenceCode", typeof(string));
            }
    
            ObjectParameter customerNameParameter;
    
            if (customerName != null)
            {
                customerNameParameter = new ObjectParameter("CustomerName", customerName);
            }
            else
            {
                customerNameParameter = new ObjectParameter("CustomerName", typeof(string));
            }
    
            ObjectParameter customerEmailParameter;
    
            if (customerEmail != null)
            {
                customerEmailParameter = new ObjectParameter("CustomerEmail", customerEmail);
            }
            else
            {
                customerEmailParameter = new ObjectParameter("CustomerEmail", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("CreateCustomer", customerCodeParameter, referenceCodeParameter, customerNameParameter, customerEmailParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteCustomer(Nullable<int> customerID)
        {
    
            ObjectParameter customerIDParameter;
    
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteCustomer", customerIDParameter);
        }
        public ObjectResult<Nullable<bool>> ModifyCustomer(Nullable<int> customerID, string customerCode, string referenceCode, string customerName, string customerEmail)
        {
    
            ObjectParameter customerIDParameter;
    
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(int));
            }
    
            ObjectParameter customerCodeParameter;
    
            if (customerCode != null)
            {
                customerCodeParameter = new ObjectParameter("CustomerCode", customerCode);
            }
            else
            {
                customerCodeParameter = new ObjectParameter("CustomerCode", typeof(string));
            }
    
            ObjectParameter referenceCodeParameter;
    
            if (referenceCode != null)
            {
                referenceCodeParameter = new ObjectParameter("ReferenceCode", referenceCode);
            }
            else
            {
                referenceCodeParameter = new ObjectParameter("ReferenceCode", typeof(string));
            }
    
            ObjectParameter customerNameParameter;
    
            if (customerName != null)
            {
                customerNameParameter = new ObjectParameter("CustomerName", customerName);
            }
            else
            {
                customerNameParameter = new ObjectParameter("CustomerName", typeof(string));
            }
    
            ObjectParameter customerEmailParameter;
    
            if (customerEmail != null)
            {
                customerEmailParameter = new ObjectParameter("CustomerEmail", customerEmail);
            }
            else
            {
                customerEmailParameter = new ObjectParameter("CustomerEmail", typeof(string));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifyCustomer", customerIDParameter, customerCodeParameter, referenceCodeParameter, customerNameParameter, customerEmailParameter);
        }
        public ObjectResult<Nullable<int>> ImportCustomer()
        {
            return base.ExecuteFunction<Nullable<int>>("ImportCustomer");
        }
        public ObjectResult<Nullable<int>> CreateSampleStatus(string sampleStatusName, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter sampleStatusNameParameter;
    
            if (sampleStatusName != null)
            {
                sampleStatusNameParameter = new ObjectParameter("SampleStatusName", sampleStatusName);
            }
            else
            {
                sampleStatusNameParameter = new ObjectParameter("SampleStatusName", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("CreateSampleStatus", sampleStatusNameParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> ModifySampleStatus(Nullable<int> sampleStatusID, string sampleStatusName, string description, Nullable<bool> isActive)
        {
    
            ObjectParameter sampleStatusIDParameter;
    
            if (sampleStatusID.HasValue)
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", sampleStatusID);
            }
            else
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", typeof(int));
            }
    
            ObjectParameter sampleStatusNameParameter;
    
            if (sampleStatusName != null)
            {
                sampleStatusNameParameter = new ObjectParameter("SampleStatusName", sampleStatusName);
            }
            else
            {
                sampleStatusNameParameter = new ObjectParameter("SampleStatusName", typeof(string));
            }
    
            ObjectParameter descriptionParameter;
    
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("ModifySampleStatus", sampleStatusIDParameter, sampleStatusNameParameter, descriptionParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> DeleteSampleStatus(Nullable<int> sampleStatusID)
        {
    
            ObjectParameter sampleStatusIDParameter;
    
            if (sampleStatusID.HasValue)
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", sampleStatusID);
            }
            else
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("DeleteSampleStatus", sampleStatusIDParameter);
        }
        public ObjectResult<SampleStatu> GetSampleStatus(Nullable<int> sampleStatusID)
        {
    
            ObjectParameter sampleStatusIDParameter;
    
            if (sampleStatusID.HasValue)
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", sampleStatusID);
            }
            else
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", typeof(int));
            }
            return base.ExecuteFunction<SampleStatu>("GetSampleStatus", sampleStatusIDParameter);
        }
        public ObjectResult<Nullable<int>> SamplesTracking_Insert(Nullable<int> sampleID, Nullable<int> sampleStatusID, Nullable<bool> isActive)
        {
    
            ObjectParameter sampleIDParameter;
    
            if (sampleID.HasValue)
            {
                sampleIDParameter = new ObjectParameter("SampleID", sampleID);
            }
            else
            {
                sampleIDParameter = new ObjectParameter("SampleID", typeof(int));
            }
    
            ObjectParameter sampleStatusIDParameter;
    
            if (sampleStatusID.HasValue)
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", sampleStatusID);
            }
            else
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("SamplesTracking_Insert", sampleIDParameter, sampleStatusIDParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> SamplesTracking_Update(Nullable<int> sampleTrackID, Nullable<int> sampleID, Nullable<int> sampleStatusID, Nullable<bool> isActive, Nullable<int> updatedby)
        {
    
            ObjectParameter sampleTrackIDParameter;
    
            if (sampleTrackID.HasValue)
            {
                sampleTrackIDParameter = new ObjectParameter("SampleTrackID", sampleTrackID);
            }
            else
            {
                sampleTrackIDParameter = new ObjectParameter("SampleTrackID", typeof(int));
            }
    
            ObjectParameter sampleIDParameter;
    
            if (sampleID.HasValue)
            {
                sampleIDParameter = new ObjectParameter("SampleID", sampleID);
            }
            else
            {
                sampleIDParameter = new ObjectParameter("SampleID", typeof(int));
            }
    
            ObjectParameter sampleStatusIDParameter;
    
            if (sampleStatusID.HasValue)
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", sampleStatusID);
            }
            else
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter updatedbyParameter;
    
            if (updatedby.HasValue)
            {
                updatedbyParameter = new ObjectParameter("Updatedby", updatedby);
            }
            else
            {
                updatedbyParameter = new ObjectParameter("Updatedby", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("SamplesTracking_Update", sampleTrackIDParameter, sampleIDParameter, sampleStatusIDParameter, isActiveParameter, updatedbyParameter);
        }
        public ObjectResult<SamplesTracking> SamplesTracking_Select(Nullable<int> sampleTrackID)
        {
    
            ObjectParameter sampleTrackIDParameter;
    
            if (sampleTrackID.HasValue)
            {
                sampleTrackIDParameter = new ObjectParameter("SampleTrackID", sampleTrackID);
            }
            else
            {
                sampleTrackIDParameter = new ObjectParameter("SampleTrackID", typeof(int));
            }
            return base.ExecuteFunction<SamplesTracking>("SamplesTracking_Select", sampleTrackIDParameter);
        }
        public ObjectResult<SampleTracking_Result> SamplesTracking_Result(Nullable<int> sampleTrackID)
        {
    
            ObjectParameter sampleTrackIDParameter;
    
            if (sampleTrackID.HasValue)
            {
                sampleTrackIDParameter = new ObjectParameter("SampleTrackID", sampleTrackID);
            }
            else
            {
                sampleTrackIDParameter = new ObjectParameter("SampleTrackID", typeof(int));
            }
            return base.ExecuteFunction<SampleTracking_Result>("SamplesTracking_Result", sampleTrackIDParameter);
        }
        public ObjectResult<Nullable<decimal>> Ticket_Insert(Nullable<int> ticketThreadID, string ticketText, Nullable<int> assignedFrom, Nullable<bool> isActive, Nullable<int> hasAttachment)
        {
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
    
            ObjectParameter ticketTextParameter;
    
            if (ticketText != null)
            {
                ticketTextParameter = new ObjectParameter("TicketText", ticketText);
            }
            else
            {
                ticketTextParameter = new ObjectParameter("TicketText", typeof(string));
            }
    
            ObjectParameter assignedFromParameter;
    
            if (assignedFrom.HasValue)
            {
                assignedFromParameter = new ObjectParameter("AssignedFrom", assignedFrom);
            }
            else
            {
                assignedFromParameter = new ObjectParameter("AssignedFrom", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter hasAttachmentParameter;
    
            if (hasAttachment.HasValue)
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", hasAttachment);
            }
            else
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", typeof(int));
            }
            return base.ExecuteFunction<Nullable<decimal>>("Ticket_Insert", ticketThreadIDParameter, ticketTextParameter, assignedFromParameter, isActiveParameter, hasAttachmentParameter);
        }
        public ObjectResult<Tickets_Result> Ticket_Select(Nullable<int> ticketThreadID)
        {
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
            return base.ExecuteFunction<Tickets_Result>("Ticket_Select", ticketThreadIDParameter);
        }
        public ObjectResult<Tickets_Result> Ticket_SelectByAssignedTo(Nullable<int> userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<Tickets_Result>("Ticket_SelectByAssignedTo", userIDParameter);
        }
        public ObjectResult<Tickets_Result> Ticket_SelectByReadStatus(Nullable<int> userID, Nullable<bool> hasRead)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter hasReadParameter;
    
            if (hasRead.HasValue)
            {
                hasReadParameter = new ObjectParameter("HasRead", hasRead);
            }
            else
            {
                hasReadParameter = new ObjectParameter("HasRead", typeof(bool));
            }
            return base.ExecuteFunction<Tickets_Result>("Ticket_SelectByReadStatus", userIDParameter, hasReadParameter);
        }
        public ObjectResult<Tickets_Result> Ticket_SelectByUserID(Nullable<int> userID, Nullable<bool> hasRead)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter hasReadParameter;
    
            if (hasRead.HasValue)
            {
                hasReadParameter = new ObjectParameter("HasRead", hasRead);
            }
            else
            {
                hasReadParameter = new ObjectParameter("HasRead", typeof(bool));
            }
            return base.ExecuteFunction<Tickets_Result>("Ticket_SelectByUserID", userIDParameter, hasReadParameter);
        }
        public ObjectResult<Nullable<int>> TicketAttachment_Insert(Nullable<int> ticketID, string locationURL, string contentType, Nullable<bool> isActive)
        {
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter locationURLParameter;
    
            if (locationURL != null)
            {
                locationURLParameter = new ObjectParameter("LocationURL", locationURL);
            }
            else
            {
                locationURLParameter = new ObjectParameter("LocationURL", typeof(string));
            }
    
            ObjectParameter contentTypeParameter;
    
            if (contentType != null)
            {
                contentTypeParameter = new ObjectParameter("ContentType", contentType);
            }
            else
            {
                contentTypeParameter = new ObjectParameter("ContentType", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("TicketAttachment_Insert", ticketIDParameter, locationURLParameter, contentTypeParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<int>> TicketThread_Insert(string subject, Nullable<int> status, string closingRemarks, Nullable<int> lastModifiedBy, Nullable<int> createdBy, Nullable<int> assignedTo, Nullable<bool> isActive)
        {
    
            ObjectParameter subjectParameter;
    
            if (subject != null)
            {
                subjectParameter = new ObjectParameter("Subject", subject);
            }
            else
            {
                subjectParameter = new ObjectParameter("Subject", typeof(string));
            }
    
            ObjectParameter statusParameter;
    
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(int));
            }
    
            ObjectParameter closingRemarksParameter;
    
            if (closingRemarks != null)
            {
                closingRemarksParameter = new ObjectParameter("ClosingRemarks", closingRemarks);
            }
            else
            {
                closingRemarksParameter = new ObjectParameter("ClosingRemarks", typeof(string));
            }
    
            ObjectParameter lastModifiedByParameter;
    
            if (lastModifiedBy.HasValue)
            {
                lastModifiedByParameter = new ObjectParameter("LastModifiedBy", lastModifiedBy);
            }
            else
            {
                lastModifiedByParameter = new ObjectParameter("LastModifiedBy", typeof(int));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("TicketThread_Insert", subjectParameter, statusParameter, closingRemarksParameter, lastModifiedByParameter, createdByParameter, assignedToParameter, isActiveParameter);
        }
        public ObjectResult<TicketThreads_Result> TicketThread_Select(Nullable<int> userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<TicketThreads_Result>("TicketThread_Select", userIDParameter);
        }
        public ObjectResult<Nullable<short>> TicketThread_Update(Nullable<int> ticketThreadID, string subject, Nullable<int> status, string closingRemarks, Nullable<int> lastModifiedBy, Nullable<int> assignedTo, Nullable<bool> isActive)
        {
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
    
            ObjectParameter subjectParameter;
    
            if (subject != null)
            {
                subjectParameter = new ObjectParameter("Subject", subject);
            }
            else
            {
                subjectParameter = new ObjectParameter("Subject", typeof(string));
            }
    
            ObjectParameter statusParameter;
    
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(int));
            }
    
            ObjectParameter closingRemarksParameter;
    
            if (closingRemarks != null)
            {
                closingRemarksParameter = new ObjectParameter("ClosingRemarks", closingRemarks);
            }
            else
            {
                closingRemarksParameter = new ObjectParameter("ClosingRemarks", typeof(string));
            }
    
            ObjectParameter lastModifiedByParameter;
    
            if (lastModifiedBy.HasValue)
            {
                lastModifiedByParameter = new ObjectParameter("LastModifiedBy", lastModifiedBy);
            }
            else
            {
                lastModifiedByParameter = new ObjectParameter("LastModifiedBy", typeof(int));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<short>>("TicketThread_Update", ticketThreadIDParameter, subjectParameter, statusParameter, closingRemarksParameter, lastModifiedByParameter, assignedToParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<short>> TicketTo_MarkRead(Nullable<int> ticketThreadID, Nullable<int> userID, Nullable<bool> hasRead)
        {
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
    
            ObjectParameter hasReadParameter;
    
            if (hasRead.HasValue)
            {
                hasReadParameter = new ObjectParameter("HasRead", hasRead);
            }
            else
            {
                hasReadParameter = new ObjectParameter("HasRead", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<short>>("TicketTo_MarkRead", ticketThreadIDParameter, userIDParameter, hasReadParameter);
        }
        public ObjectResult<Nullable<bool>> Create_Ticket(Nullable<int> ticketThreadID, Nullable<int> createdBy, Nullable<int> assignedTo, string subject, string ticketText, Nullable<bool> isActive, Nullable<int> status, string attachmentURL, string contentType, Nullable<bool> hasAttachment)
        {
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter subjectParameter;
    
            if (subject != null)
            {
                subjectParameter = new ObjectParameter("Subject", subject);
            }
            else
            {
                subjectParameter = new ObjectParameter("Subject", typeof(string));
            }
    
            ObjectParameter ticketTextParameter;
    
            if (ticketText != null)
            {
                ticketTextParameter = new ObjectParameter("TicketText", ticketText);
            }
            else
            {
                ticketTextParameter = new ObjectParameter("TicketText", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter statusParameter;
    
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(int));
            }
    
            ObjectParameter attachmentURLParameter;
    
            if (attachmentURL != null)
            {
                attachmentURLParameter = new ObjectParameter("AttachmentURL", attachmentURL);
            }
            else
            {
                attachmentURLParameter = new ObjectParameter("AttachmentURL", typeof(string));
            }
    
            ObjectParameter contentTypeParameter;
    
            if (contentType != null)
            {
                contentTypeParameter = new ObjectParameter("ContentType", contentType);
            }
            else
            {
                contentTypeParameter = new ObjectParameter("ContentType", typeof(string));
            }
    
            ObjectParameter hasAttachmentParameter;
    
            if (hasAttachment.HasValue)
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", hasAttachment);
            }
            else
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<bool>>("Create_Ticket", ticketThreadIDParameter, createdByParameter, assignedToParameter, subjectParameter, ticketTextParameter, isActiveParameter, statusParameter, attachmentURLParameter, contentTypeParameter, hasAttachmentParameter);
        }
        public ObjectResult<TicketParticipants_Result> TicketParticipants_Select()
        {
            return base.ExecuteFunction<TicketParticipants_Result>("TicketParticipants_Select");
        }
        public ObjectResult<Nullable<int>> Create_CaseForTicketNew(Nullable<int> createdBy, Nullable<int> assignedTo, string subject, string ticketText, Nullable<bool> isActive, Nullable<int> status, string attachmentURL, string contentType, Nullable<bool> hasAttachment, Nullable<int> ticketThreadID)
        {
    
            ObjectParameter createdByParameter;
    
            if (createdBy.HasValue)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(int));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter subjectParameter;
    
            if (subject != null)
            {
                subjectParameter = new ObjectParameter("Subject", subject);
            }
            else
            {
                subjectParameter = new ObjectParameter("Subject", typeof(string));
            }
    
            ObjectParameter ticketTextParameter;
    
            if (ticketText != null)
            {
                ticketTextParameter = new ObjectParameter("TicketText", ticketText);
            }
            else
            {
                ticketTextParameter = new ObjectParameter("TicketText", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter statusParameter;
    
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(int));
            }
    
            ObjectParameter attachmentURLParameter;
    
            if (attachmentURL != null)
            {
                attachmentURLParameter = new ObjectParameter("AttachmentURL", attachmentURL);
            }
            else
            {
                attachmentURLParameter = new ObjectParameter("AttachmentURL", typeof(string));
            }
    
            ObjectParameter contentTypeParameter;
    
            if (contentType != null)
            {
                contentTypeParameter = new ObjectParameter("ContentType", contentType);
            }
            else
            {
                contentTypeParameter = new ObjectParameter("ContentType", typeof(string));
            }
    
            ObjectParameter hasAttachmentParameter;
    
            if (hasAttachment.HasValue)
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", hasAttachment);
            }
            else
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", typeof(bool));
            }
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("Create_CaseForTicketNew", createdByParameter, assignedToParameter, subjectParameter, ticketTextParameter, isActiveParameter, statusParameter, attachmentURLParameter, contentTypeParameter, hasAttachmentParameter, ticketThreadIDParameter);
        }
        public ObjectResult<Nullable<int>> Ticket_InsertNew(Nullable<int> ticketThreadID, string ticketText, Nullable<int> assignedFrom, Nullable<bool> isActive, Nullable<int> hasAttachment)
        {
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
    
            ObjectParameter ticketTextParameter;
    
            if (ticketText != null)
            {
                ticketTextParameter = new ObjectParameter("TicketText", ticketText);
            }
            else
            {
                ticketTextParameter = new ObjectParameter("TicketText", typeof(string));
            }
    
            ObjectParameter assignedFromParameter;
    
            if (assignedFrom.HasValue)
            {
                assignedFromParameter = new ObjectParameter("AssignedFrom", assignedFrom);
            }
            else
            {
                assignedFromParameter = new ObjectParameter("AssignedFrom", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
    
            ObjectParameter hasAttachmentParameter;
    
            if (hasAttachment.HasValue)
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", hasAttachment);
            }
            else
            {
                hasAttachmentParameter = new ObjectParameter("HasAttachment", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("Ticket_InsertNew", ticketThreadIDParameter, ticketTextParameter, assignedFromParameter, isActiveParameter, hasAttachmentParameter);
        }
        public ObjectResult<Nullable<bool>> TicketThread_UpdateAssignNew(Nullable<int> ticketThreadID, Nullable<int> assignedTo, Nullable<int> assignedFrom)
        {
    
            ObjectParameter ticketThreadIDParameter;
    
            if (ticketThreadID.HasValue)
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", ticketThreadID);
            }
            else
            {
                ticketThreadIDParameter = new ObjectParameter("TicketThreadID", typeof(int));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter assignedFromParameter;
    
            if (assignedFrom.HasValue)
            {
                assignedFromParameter = new ObjectParameter("AssignedFrom", assignedFrom);
            }
            else
            {
                assignedFromParameter = new ObjectParameter("AssignedFrom", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("TicketThread_UpdateAssignNew", ticketThreadIDParameter, assignedToParameter, assignedFromParameter);
        }
        public ObjectResult<ModelType> GetGetModelTypes(Nullable<int> modelTypeID)
        {
    
            ObjectParameter modelTypeIDParameter;
    
            if (modelTypeID.HasValue)
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", modelTypeID);
            }
            else
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", typeof(int));
            }
            return base.ExecuteFunction<ModelType>("GetGetModelTypes", modelTypeIDParameter);
        }
        public ObjectResult<Nullable<int>> CreateOrderNew(Nullable<int> customerID, Nullable<System.DateTime> expectedShippingDate, Nullable<int> modelTypeID, Nullable<int> modelSubTypeID, string modelNumber, Nullable<int> processTypeID, Nullable<int> metalID, string metalOther, Nullable<int> fingerSizeID, string fingerSizeOther, string quantity, string quantityOther, Nullable<decimal> length, string lengthMeasurement, Nullable<int> priorityID, Nullable<bool> makeExactCopies, Nullable<int> ringTypeID, Nullable<bool> isExistingModel, string modelToMatch, string curveType, string tailoredType, Nullable<bool> isFinishAtSomePoint, string additionalInfo, Nullable<bool> isPF, string headSize, Nullable<bool> isCADRequested, Nullable<bool> isSampleProvided, Nullable<byte> noOfSamples, Nullable<bool> makeExactCopiesSample, Nullable<bool> isStoneProvided, string stoneDescription, string settingInstructions, string remarks, Nullable<int> assignedTo, Nullable<int> tMUserID, Nullable<int> orderStatusID, Nullable<int> createdByUserID, string specimenData)
        {
    
            ObjectParameter customerIDParameter;
    
            if (customerID.HasValue)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(int));
            }
    
            ObjectParameter expectedShippingDateParameter;
    
            if (expectedShippingDate.HasValue)
            {
                expectedShippingDateParameter = new ObjectParameter("ExpectedShippingDate", expectedShippingDate);
            }
            else
            {
                expectedShippingDateParameter = new ObjectParameter("ExpectedShippingDate", typeof(System.DateTime));
            }
    
            ObjectParameter modelTypeIDParameter;
    
            if (modelTypeID.HasValue)
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", modelTypeID);
            }
            else
            {
                modelTypeIDParameter = new ObjectParameter("ModelTypeID", typeof(int));
            }
    
            ObjectParameter modelSubTypeIDParameter;
    
            if (modelSubTypeID.HasValue)
            {
                modelSubTypeIDParameter = new ObjectParameter("ModelSubTypeID", modelSubTypeID);
            }
            else
            {
                modelSubTypeIDParameter = new ObjectParameter("ModelSubTypeID", typeof(int));
            }
    
            ObjectParameter modelNumberParameter;
    
            if (modelNumber != null)
            {
                modelNumberParameter = new ObjectParameter("ModelNumber", modelNumber);
            }
            else
            {
                modelNumberParameter = new ObjectParameter("ModelNumber", typeof(string));
            }
    
            ObjectParameter processTypeIDParameter;
    
            if (processTypeID.HasValue)
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", processTypeID);
            }
            else
            {
                processTypeIDParameter = new ObjectParameter("ProcessTypeID", typeof(int));
            }
    
            ObjectParameter metalIDParameter;
    
            if (metalID.HasValue)
            {
                metalIDParameter = new ObjectParameter("MetalID", metalID);
            }
            else
            {
                metalIDParameter = new ObjectParameter("MetalID", typeof(int));
            }
    
            ObjectParameter metalOtherParameter;
    
            if (metalOther != null)
            {
                metalOtherParameter = new ObjectParameter("MetalOther", metalOther);
            }
            else
            {
                metalOtherParameter = new ObjectParameter("MetalOther", typeof(string));
            }
    
            ObjectParameter fingerSizeIDParameter;
    
            if (fingerSizeID.HasValue)
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", fingerSizeID);
            }
            else
            {
                fingerSizeIDParameter = new ObjectParameter("FingerSizeID", typeof(int));
            }
    
            ObjectParameter fingerSizeOtherParameter;
    
            if (fingerSizeOther != null)
            {
                fingerSizeOtherParameter = new ObjectParameter("FingerSizeOther", fingerSizeOther);
            }
            else
            {
                fingerSizeOtherParameter = new ObjectParameter("FingerSizeOther", typeof(string));
            }
    
            ObjectParameter quantityParameter;
    
            if (quantity != null)
            {
                quantityParameter = new ObjectParameter("Quantity", quantity);
            }
            else
            {
                quantityParameter = new ObjectParameter("Quantity", typeof(string));
            }
    
            ObjectParameter quantityOtherParameter;
    
            if (quantityOther != null)
            {
                quantityOtherParameter = new ObjectParameter("QuantityOther", quantityOther);
            }
            else
            {
                quantityOtherParameter = new ObjectParameter("QuantityOther", typeof(string));
            }
    
            ObjectParameter lengthParameter;
    
            if (length.HasValue)
            {
                lengthParameter = new ObjectParameter("Length", length);
            }
            else
            {
                lengthParameter = new ObjectParameter("Length", typeof(decimal));
            }
    
            ObjectParameter lengthMeasurementParameter;
    
            if (lengthMeasurement != null)
            {
                lengthMeasurementParameter = new ObjectParameter("LengthMeasurement", lengthMeasurement);
            }
            else
            {
                lengthMeasurementParameter = new ObjectParameter("LengthMeasurement", typeof(string));
            }
    
            ObjectParameter priorityIDParameter;
    
            if (priorityID.HasValue)
            {
                priorityIDParameter = new ObjectParameter("PriorityID", priorityID);
            }
            else
            {
                priorityIDParameter = new ObjectParameter("PriorityID", typeof(int));
            }
    
            ObjectParameter makeExactCopiesParameter;
    
            if (makeExactCopies.HasValue)
            {
                makeExactCopiesParameter = new ObjectParameter("MakeExactCopies", makeExactCopies);
            }
            else
            {
                makeExactCopiesParameter = new ObjectParameter("MakeExactCopies", typeof(bool));
            }
    
            ObjectParameter ringTypeIDParameter;
    
            if (ringTypeID.HasValue)
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", ringTypeID);
            }
            else
            {
                ringTypeIDParameter = new ObjectParameter("RingTypeID", typeof(int));
            }
    
            ObjectParameter isExistingModelParameter;
    
            if (isExistingModel.HasValue)
            {
                isExistingModelParameter = new ObjectParameter("IsExistingModel", isExistingModel);
            }
            else
            {
                isExistingModelParameter = new ObjectParameter("IsExistingModel", typeof(bool));
            }
    
            ObjectParameter modelToMatchParameter;
    
            if (modelToMatch != null)
            {
                modelToMatchParameter = new ObjectParameter("ModelToMatch", modelToMatch);
            }
            else
            {
                modelToMatchParameter = new ObjectParameter("ModelToMatch", typeof(string));
            }
    
            ObjectParameter curveTypeParameter;
    
            if (curveType != null)
            {
                curveTypeParameter = new ObjectParameter("CurveType", curveType);
            }
            else
            {
                curveTypeParameter = new ObjectParameter("CurveType", typeof(string));
            }
    
            ObjectParameter tailoredTypeParameter;
    
            if (tailoredType != null)
            {
                tailoredTypeParameter = new ObjectParameter("TailoredType", tailoredType);
            }
            else
            {
                tailoredTypeParameter = new ObjectParameter("TailoredType", typeof(string));
            }
    
            ObjectParameter isFinishAtSomePointParameter;
    
            if (isFinishAtSomePoint.HasValue)
            {
                isFinishAtSomePointParameter = new ObjectParameter("IsFinishAtSomePoint", isFinishAtSomePoint);
            }
            else
            {
                isFinishAtSomePointParameter = new ObjectParameter("IsFinishAtSomePoint", typeof(bool));
            }
    
            ObjectParameter additionalInfoParameter;
    
            if (additionalInfo != null)
            {
                additionalInfoParameter = new ObjectParameter("AdditionalInfo", additionalInfo);
            }
            else
            {
                additionalInfoParameter = new ObjectParameter("AdditionalInfo", typeof(string));
            }
    
            ObjectParameter isPFParameter;
    
            if (isPF.HasValue)
            {
                isPFParameter = new ObjectParameter("IsPF", isPF);
            }
            else
            {
                isPFParameter = new ObjectParameter("IsPF", typeof(bool));
            }
    
            ObjectParameter headSizeParameter;
    
            if (headSize != null)
            {
                headSizeParameter = new ObjectParameter("HeadSize", headSize);
            }
            else
            {
                headSizeParameter = new ObjectParameter("HeadSize", typeof(string));
            }
    
            ObjectParameter isCADRequestedParameter;
    
            if (isCADRequested.HasValue)
            {
                isCADRequestedParameter = new ObjectParameter("IsCADRequested", isCADRequested);
            }
            else
            {
                isCADRequestedParameter = new ObjectParameter("IsCADRequested", typeof(bool));
            }
    
            ObjectParameter isSampleProvidedParameter;
    
            if (isSampleProvided.HasValue)
            {
                isSampleProvidedParameter = new ObjectParameter("IsSampleProvided", isSampleProvided);
            }
            else
            {
                isSampleProvidedParameter = new ObjectParameter("IsSampleProvided", typeof(bool));
            }
    
            ObjectParameter noOfSamplesParameter;
    
            if (noOfSamples.HasValue)
            {
                noOfSamplesParameter = new ObjectParameter("NoOfSamples", noOfSamples);
            }
            else
            {
                noOfSamplesParameter = new ObjectParameter("NoOfSamples", typeof(byte));
            }
    
            ObjectParameter makeExactCopiesSampleParameter;
    
            if (makeExactCopiesSample.HasValue)
            {
                makeExactCopiesSampleParameter = new ObjectParameter("MakeExactCopiesSample", makeExactCopiesSample);
            }
            else
            {
                makeExactCopiesSampleParameter = new ObjectParameter("MakeExactCopiesSample", typeof(bool));
            }
    
            ObjectParameter isStoneProvidedParameter;
    
            if (isStoneProvided.HasValue)
            {
                isStoneProvidedParameter = new ObjectParameter("IsStoneProvided", isStoneProvided);
            }
            else
            {
                isStoneProvidedParameter = new ObjectParameter("IsStoneProvided", typeof(bool));
            }
    
            ObjectParameter stoneDescriptionParameter;
    
            if (stoneDescription != null)
            {
                stoneDescriptionParameter = new ObjectParameter("StoneDescription", stoneDescription);
            }
            else
            {
                stoneDescriptionParameter = new ObjectParameter("StoneDescription", typeof(string));
            }
    
            ObjectParameter settingInstructionsParameter;
    
            if (settingInstructions != null)
            {
                settingInstructionsParameter = new ObjectParameter("SettingInstructions", settingInstructions);
            }
            else
            {
                settingInstructionsParameter = new ObjectParameter("SettingInstructions", typeof(string));
            }
    
            ObjectParameter remarksParameter;
    
            if (remarks != null)
            {
                remarksParameter = new ObjectParameter("Remarks", remarks);
            }
            else
            {
                remarksParameter = new ObjectParameter("Remarks", typeof(string));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter tMUserIDParameter;
    
            if (tMUserID.HasValue)
            {
                tMUserIDParameter = new ObjectParameter("TMUserID", tMUserID);
            }
            else
            {
                tMUserIDParameter = new ObjectParameter("TMUserID", typeof(int));
            }
    
            ObjectParameter orderStatusIDParameter;
    
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(int));
            }
    
            ObjectParameter createdByUserIDParameter;
    
            if (createdByUserID.HasValue)
            {
                createdByUserIDParameter = new ObjectParameter("CreatedByUserID", createdByUserID);
            }
            else
            {
                createdByUserIDParameter = new ObjectParameter("CreatedByUserID", typeof(int));
            }
    
            ObjectParameter specimenDataParameter;
    
            if (specimenData != null)
            {
                specimenDataParameter = new ObjectParameter("SpecimenData", specimenData);
            }
            else
            {
                specimenDataParameter = new ObjectParameter("SpecimenData", typeof(string));
            }
            return base.ExecuteFunction<Nullable<int>>("CreateOrderNew", customerIDParameter, expectedShippingDateParameter, modelTypeIDParameter, modelSubTypeIDParameter, modelNumberParameter, processTypeIDParameter, metalIDParameter, metalOtherParameter, fingerSizeIDParameter, fingerSizeOtherParameter, quantityParameter, quantityOtherParameter, lengthParameter, lengthMeasurementParameter, priorityIDParameter, makeExactCopiesParameter, ringTypeIDParameter, isExistingModelParameter, modelToMatchParameter, curveTypeParameter, tailoredTypeParameter, isFinishAtSomePointParameter, additionalInfoParameter, isPFParameter, headSizeParameter, isCADRequestedParameter, isSampleProvidedParameter, noOfSamplesParameter, makeExactCopiesSampleParameter, isStoneProvidedParameter, stoneDescriptionParameter, settingInstructionsParameter, remarksParameter, assignedToParameter, tMUserIDParameter, orderStatusIDParameter, createdByUserIDParameter, specimenDataParameter);
        }
        public ObjectResult<Nullable<int>> TicketAttachment_InsertNew(Nullable<int> ticketID, string locationURL, string contentType, Nullable<bool> isActive)
        {
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter locationURLParameter;
    
            if (locationURL != null)
            {
                locationURLParameter = new ObjectParameter("LocationURL", locationURL);
            }
            else
            {
                locationURLParameter = new ObjectParameter("LocationURL", typeof(string));
            }
    
            ObjectParameter contentTypeParameter;
    
            if (contentType != null)
            {
                contentTypeParameter = new ObjectParameter("ContentType", contentType);
            }
            else
            {
                contentTypeParameter = new ObjectParameter("ContentType", typeof(string));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("TicketAttachment_InsertNew", ticketIDParameter, locationURLParameter, contentTypeParameter, isActiveParameter);
        }
        public ObjectResult<Nullable<bool>> SamplesTracking_MassUpdate(string sampleIDs, Nullable<int> sampleStatusID, Nullable<int> updatedby)
        {
    
            ObjectParameter sampleIDsParameter;
    
            if (sampleIDs != null)
            {
                sampleIDsParameter = new ObjectParameter("SampleIDs", sampleIDs);
            }
            else
            {
                sampleIDsParameter = new ObjectParameter("SampleIDs", typeof(string));
            }
    
            ObjectParameter sampleStatusIDParameter;
    
            if (sampleStatusID.HasValue)
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", sampleStatusID);
            }
            else
            {
                sampleStatusIDParameter = new ObjectParameter("SampleStatusID", typeof(int));
            }
    
            ObjectParameter updatedbyParameter;
    
            if (updatedby.HasValue)
            {
                updatedbyParameter = new ObjectParameter("Updatedby", updatedby);
            }
            else
            {
                updatedbyParameter = new ObjectParameter("Updatedby", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("SamplesTracking_MassUpdate", sampleIDsParameter, sampleStatusIDParameter, updatedbyParameter);
        }
        public ObjectResult<SamplesTrackingHistory_Result> SamplesTrackingHistory_Result(Nullable<int> sampleID)
        {
    
            ObjectParameter sampleIDParameter;
    
            if (sampleID.HasValue)
            {
                sampleIDParameter = new ObjectParameter("SampleID", sampleID);
            }
            else
            {
                sampleIDParameter = new ObjectParameter("SampleID", typeof(int));
            }
            return base.ExecuteFunction<SamplesTrackingHistory_Result>("SamplesTrackingHistory_Result", sampleIDParameter);
        }
        public ObjectResult<Nullable<bool>> TicketThread_MassUpdate(string ticketThreadIDs, Nullable<int> updatedby)
        {
    
            ObjectParameter ticketThreadIDsParameter;
    
            if (ticketThreadIDs != null)
            {
                ticketThreadIDsParameter = new ObjectParameter("TicketThreadIDs", ticketThreadIDs);
            }
            else
            {
                ticketThreadIDsParameter = new ObjectParameter("TicketThreadIDs", typeof(string));
            }
    
            ObjectParameter updatedbyParameter;
    
            if (updatedby.HasValue)
            {
                updatedbyParameter = new ObjectParameter("Updatedby", updatedby);
            }
            else
            {
                updatedbyParameter = new ObjectParameter("Updatedby", typeof(int));
            }
            return base.ExecuteFunction<Nullable<bool>>("TicketThread_MassUpdate", ticketThreadIDsParameter, updatedbyParameter);
        }
        public ObjectResult<TicketThreads_Result> TicketThreadClosed_Select(Nullable<int> userID)
        {
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<TicketThreads_Result>("TicketThreadClosed_Select", userIDParameter);
        }
        public ObjectResult<OrdersCAD> OrderCADTop2_Select(Nullable<int> orderID, Nullable<int> cADID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
    
            ObjectParameter cADIDParameter;
    
            if (cADID.HasValue)
            {
                cADIDParameter = new ObjectParameter("CADID", cADID);
            }
            else
            {
                cADIDParameter = new ObjectParameter("CADID", typeof(int));
            }
            return base.ExecuteFunction<OrdersCAD>("OrderCADTop2_Select", orderIDParameter, cADIDParameter);
        }
        public ObjectResult<Nullable<int>> MessageOrder_Select(Nullable<int> orderID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
            return base.ExecuteFunction<Nullable<int>>("MessageOrder_Select", orderIDParameter);
        }
        public ObjectResult<Orders_Result> GetCancelledOrders(Nullable<int> assignedTo, Nullable<int> orderStatusID, Nullable<int> userID)
        {
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter orderStatusIDParameter;
    
            if (orderStatusID.HasValue)
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", orderStatusID);
            }
            else
            {
                orderStatusIDParameter = new ObjectParameter("OrderStatusID", typeof(int));
            }
    
            ObjectParameter userIDParameter;
    
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(int));
            }
            return base.ExecuteFunction<Orders_Result>("GetCancelledOrders", assignedToParameter, orderStatusIDParameter, userIDParameter);
        }
        public ObjectResult<Nullable<int>> TicketTo_Insert(Nullable<int> ticketID, Nullable<int> assignedTo, Nullable<bool> isActive)
        {
    
            ObjectParameter ticketIDParameter;
    
            if (ticketID.HasValue)
            {
                ticketIDParameter = new ObjectParameter("TicketID", ticketID);
            }
            else
            {
                ticketIDParameter = new ObjectParameter("TicketID", typeof(int));
            }
    
            ObjectParameter assignedToParameter;
    
            if (assignedTo.HasValue)
            {
                assignedToParameter = new ObjectParameter("AssignedTo", assignedTo);
            }
            else
            {
                assignedToParameter = new ObjectParameter("AssignedTo", typeof(int));
            }
    
            ObjectParameter isActiveParameter;
    
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(bool));
            }
            return base.ExecuteFunction<Nullable<int>>("TicketTo_Insert", ticketIDParameter, assignedToParameter, isActiveParameter);
        }

        #endregion
    }
}
