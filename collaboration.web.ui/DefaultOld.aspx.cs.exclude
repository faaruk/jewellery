using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Collaboration.Business.Entities;
using Collaboration.Business.Components;
using System.IO;
using Collaboration.Web.UI.Utilities;
using System.Collections;
using System.Web.UI.DataVisualization.Charting;
using System.Data;
using System.Drawing;
namespace Collaboration.Web.UI
{
    public partial class DefaultOld : BasePage
    {
        private static int _userID = 0;
        public int UserID { set { _userID = value; } get { return (Session[Collaboration.Web.UI.Common.SESSION_USER] as User).UserID; } }

        // Get Role ID of Logged In user (By ExpertDev)
        private static int _roleID = 0;
        public int RoleID { set { _roleID = value; } get { return (Session[Collaboration.Web.UI.Common.SESSION_USER] as User).RoleID; } }


        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
                BindData();
        }
        /// <summary>
        /// 
        /// </summary>
        private void BindData()
        {
            int deadlineInDays = Convert.ToInt32(Resource.Val_ApproachingDeadline);
            DashboardData_Result data = null;

            // Check looged in user's role and get dashboard data based on that
            if (RoleID == Convert.ToInt32(Resource.DB_AdminRoleID))
            {
                data = new OrderManager().GetDashboardData(UserID, deadlineInDays,0);
            }
            else
            {
                data = new OrderManager().GetDashboardData(UserID, deadlineInDays, UserID);
            }

            lblInitiated.Text =
            lblOrderInitiated.Text = Convert.ToString(data.CountInitiated);
            lblTMNotAssigned.Text = Convert.ToString(data.CountTMNotAssigned);
            lblCADInProgress.Text = Convert.ToString(data.CountCADInProgress);
            lblPendingTMReview.Text = Convert.ToString(data.CountPendingTMReview);
            lblChangeRequest.Text = Convert.ToString(data.CountChangeRequested);
            lblPendingCustomerConfirmation.Text = Convert.ToString(data.CountPendingCustomerConfirmation);
            lblCADConfirmed.Text = Convert.ToString(data.CountCADConfirmed);
            lblPrototypingBegins.Text = Convert.ToString(data.CountPrototypingBegins);
            lblProductionInProgress.Text = Convert.ToString(data.CountProductionInProgress);
            lblShipped.Text = Convert.ToString(data.CountShipped);
            lblDelayed.Text = Convert.ToString(data.CountOrdersDelayed);
            lblSampleNotReturned.Text = Convert.ToString(data.CountSampleNotReturned);

            lblOrdersApproachingDeadline.Text = Convert.ToString(data.CountOrdersApproachingDeadline);

            lblDelayedShipping.Text = Convert.ToString(data.CountOrdersDelayedShipping);
            lblOrdersApproachingShipping.Text = Convert.ToString(data.CountOrdersApproachingShipping);

            IEnumerable<Orders_Result> orders_Result = new OrderManager().GetOrders(0, 0, UserID);
            Session[Collaboration.Web.UI.Common.SESSION_ORDERS] = orders_Result;


            gvTableTMNotAssigned.DataSource = orders_Result.Where(x => x.TMUserID == null).Take(5);
            gvTableTMNotAssigned.DataBind();

            // Check if looged in user is Admin than only visible TM Not Assigned section and show all new orders
            if (RoleID == Convert.ToInt32(Resource.DB_AdminRoleID))
            {
                divTmNotAssigned.Visible = true;
                gvTableNewOrders.DataSource = orders_Result.Where(x => x.OrderStatusID == Convert.ToInt32(Resource.DB_Status_Initiated)).Take(5).OrderByDescending(X => X.OrderID).ToList();
                gvTableNewOrders.DataBind();
            }
            else // else hide TM Not Assigned and show only assigned new orders of logged in user
            {
                divTmNotAssigned.Visible = false;
                gvTableNewOrders.DataSource = orders_Result.Where(x => x.OrderStatusID == Convert.ToInt32(Resource.DB_Status_Initiated) && (x.AssignedTo == UserID || x.CreatedBy == UserID)).Take(5).OrderByDescending(X => X.OrderID).ToList(); 
                gvTableNewOrders.DataBind();

            }
                     

            BindChart();
            BindPieChart();

          
        }
        /// <summary>
        /// 
        /// </summary>
        protected void BindChart()
        {
            IEnumerable<Orders_Result> orders_Result = new OrderManager().GetOrders(0, 0, UserID);
            var Colors = new Dictionary<string, Color>();
            Colors["Normal (N)"] = Color.Green;
            Colors["Quite Urgent(Q)"] = Color.Blue;
            Colors["Urgent(U)"] = Color.Red;
            try
            {
                List<Priority> priorities = new AdminManager().GetPriorities();
                string days = Resource.ChartDataOrdersDeadline;
                string[] split = days.Split(',');

                for (int j = 0; j <= priorities.Count - 1; j++)
                {
                    chartDeadline.ChartAreas[0].AxisX.Title = "Orders Approaching Deadline";
                    Series series = new Series();
                    series.Name = priorities[j].Name;

                    

                    series.ChartType = SeriesChartType.StackedColumn;
                    series.IsValueShownAsLabel = true;
                    series.LabelForeColor = System.Drawing.Color.White;
                    int lastCount = 0;
                    for (int i = 0; i <= split.Count() - 1; i++)
                    {
                        int count = orders_Result.Where(x => Convert.ToDateTime(x.CreateDate).AddDays(Convert.ToDouble(x.Frequency)) < DateTime.Today.AddDays(Convert.ToInt32(split[i])) && x.OrderStatusID != Convert.ToInt32(Resource.DB_Status_Shipped)
                            && x.PriorityID == priorities[j].PriorityID).Count();

                        series.Points.Add(new DataPoint(i, (count-lastCount).ToString().Trim()));
                        string Label = "Next " + split[i].ToString() + " days";
                        series.Points[i].AxisLabel = Label;
                        series.Points[i].AxisLabel = Label;
                        series.Url = "~/orders/Vieworder.aspx?FilterID=7&" + Common.REQUEST_PRIORITY + "=" + priorities[j].PriorityID + "&" + Common.REQUEST_DAYS + "=" + split[i].ToString();

                        lastCount = count;                       
                    }
                    chartDeadline.ChartAreas["ChartArea1"].Area3DStyle.Enable3D = true;

                    if (Colors.ContainsKey(series.Name))
                    {
                        series.Color = Colors[series.Name];
                    }

                    chartDeadline.Series.Add(series);
                }                
            }
            catch(Exception ex)
            {}

        }
        /// <summary>
        /// 
        /// </summary>
        protected void BindPieChart()
        {
            IEnumerable<Orders_Result> orders_Result = new OrderManager().GetOrders(0, 0, UserID);

            List<OrderStatu> lst = (new OrderManager().GetOrderStatuses(0));
            lst = lst.Where(x => x.StatusID != Convert.ToInt32(Resource.DB_Status_Shipped)).ToList();
            chartDeadline.Series[0]["PieLabelStyle"] = "Outside";
            chartDeadline.Series[0]["PieLineColor"] = "Black";
            for (int j = 0; j <= lst.Count - 1; j++)
            {                     
                chartStatus.Series[0].IsValueShownAsLabel = true;
                chartStatus.Series[0].Points.AddXY(lst[j].Status, orders_Result.Where(x => x.OrderStatusID == lst[j].StatusID).Count());
                chartStatus.Series[0].Points[j].Url = "~/Orders/ViewOrder.aspx?OrderStatusID=" + lst[j].StatusID;
            }
        }

    
    }

}
