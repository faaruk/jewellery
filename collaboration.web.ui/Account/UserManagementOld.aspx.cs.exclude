using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Collaboration.Business.Entities;
using Collaboration.Business.Components;
using System.IO;
using Collaboration.Web.UI.Utilities;
using System.Data;
using System.Linq.Expressions;
using AjaxControlToolkit;
using System.Web.Security;

namespace Collaboration.Web.UI.Account
{
    public partial class UserManagement : BasePage
    {
        Collaboration.Business.Components.AccountManager _accountManager = new Business.Components.AccountManager();
        public static string _actionType = string.Empty;

        protected void Page_Load(object sender, EventArgs e)
        {
            EditProfile.btnHandler += new UserControl.UC_EditProfile.OnButtonClick(Edit_btnHandler);
            if (!IsPostBack)            
                BindGrid();

            EditProfile.ParentPopup = mpShowUpdate;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddNew_Click(object sender, EventArgs e)
        {
            EditProfile.ActionType = Convert.ToString(Common.ActionType.Add);
            EditProfile.btnHandler += new UserControl.UC_EditProfile.OnButtonClick(Edit_btnHandler);
            ShowAddDialog();
        } 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gvTable_Sorting(object sender, GridViewSortEventArgs e)
        {
            //IEnumerable<User> usersInfo = _accountManager.GetUsers();
            //usersInfo = usersInfo.OrderBy(e.SortExpression, e.SortDirection);

            //gvTable.DataSource = usersInfo.ToArray();
            //gvTable.DataBind();
        }       
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gvTable_PreRender(object sender, EventArgs e)
        {
            //if (_actionType == Convert.ToString(Common.ActionType.Edit))
            //    return;
            if (gvTable.Rows.Count > 0)
            {                
                //This will add the <thead> and <tbody> elements
                gvTable.HeaderRow.TableSection = TableRowSection.TableHeader;               
            }
          
           ScriptManager.RegisterStartupScript(this, this.GetType(), "alertmessage", "javascript:EditableTable.init();", true);
            
        } 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gvTable_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            DataRowView drview = e.Row.DataItem as DataRowView;
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                //Find dropdown control & get values
              //  Label lblUserID = (Label)e.Row.FindControl("lblUserID");
                LinkButton lnkUserID = (LinkButton)e.Row.FindControl("lnkViewPicture");

                int userID = Convert.ToInt32(lnkUserID.CommandArgument);

                bool isPictureAVailable  = (Session[Collaboration.Web.UI.Common.SESSION_USERSLIST] as List<User>).Any(x=>x.UserID == userID && x.ImageLocationURL !=null);
                if (!isPictureAVailable)
                {
                    lnkUserID.Enabled = false;
                    lnkUserID.ForeColor = System.Drawing.Color.LightGray;
                }
            }
           
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gvTable_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == Convert.ToString(Common.ActionType.Edit))
            {
                _actionType = Convert.ToString(Common.ActionType.Edit);
                EditProfile.UserID = Convert.ToInt32(e.CommandArgument);
                EditProfile.ActionType = Convert.ToString(Common.ActionType.Edit);
                ShowAddDialog();                
            }
            if (e.CommandName == "View")
            {
                imgProfile.ImageUrl = "ProfileImage.aspx?UserID=" + Convert.ToInt32(e.CommandArgument);
                pnlProfileImage.Attributes.Add(Common.UIAttributes.ATTRIBUTE_DISPLAY, Common.UIAttributes.DISPLAY_BLOCK);
                mpProfileImage.Show();
                updShowUpdate.Update();
            }
        }       
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gvTable_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
          
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gvTable_RowEditing(object sender, GridViewEditEventArgs e)
        {
         
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void gvTable_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvTable.PageIndex = e.NewPageIndex;
            BindGrid();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="strValue"></param>
        void Edit_btnHandler(string strValue)
        {
            BindGrid();                      
            updShowUpdate.Update();
            updGrid.Update();
            mpAckDelete.Show();
            lblMessage.Text = strValue;
            updShowUpdate.Update();
            //mpAdd.Show();
            //mpShowUpdate.Show();             
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnYes_Click(object sender, EventArgs e)
        {
            int userID = Convert.ToInt32(ViewState[Common.EntityAttributes.USERID]);
            Delete(userID);          
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDelete_Click(object sender, EventArgs e)
        {
            LinkButton btndetails = sender as LinkButton;
            GridViewRow gvrow = (GridViewRow)btndetails.NamingContainer;

            ViewState[Common.EntityAttributes.USERID] = btndetails.CommandArgument;
            mpConfirmDelete.Show();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="userID"></param>
        public void Delete(int userID)
        {
            try
            {
                _accountManager.DeleteUser(userID);
                BindGrid();
                lblMessage.Text = Resource.Info_Deleted;               
            }
            catch (BLLException exception)
            {
                // MessageUtility.ShowMessage(dvMessage, ltMessage, Convert.ToInt16(Common.MessageTypes.Error), exception.ErrorMessage);
                ExceptionUtility.LogException(exception, Common.INFO_PROCEDURE + exception.ProcedureName);
                lblMessage.Text = exception.ErrorMessage;               
            }
            catch (Exception exception)
            {
                // MessageUtility.ShowMessage(dvMessage, ltMessage, Convert.ToInt16(Common.MessageTypes.Error), Resource.Err_General);
                ExceptionUtility.LogException(exception, Request.RawUrl);
                lblMessage.Text = Resource.Err_General;                
            }
            finally {
                mpAckDelete.Show();
                updGrid.Update();
                updShowUpdate.Update();
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public void ShowAddDialog()
        {
            pnl.Attributes.Add(Common.UIAttributes.ATTRIBUTE_DISPLAY, Common.UIAttributes.DISPLAY_BLOCK);
            mpShowUpdate.Show();
            EditProfile.FillInfo();
            updShowUpdate.Update();
        }
        /// <summary>
        /// Bind User data to grid
        /// </summary>
        private void BindGrid()
        {
            IEnumerable<User> usersInfo = _accountManager.GetUsers();
            Session[Collaboration.Web.UI.Common.SESSION_USERSLIST] = usersInfo;

            gvTable.DataSource = usersInfo.ToArray();
            gvTable.DataBind();

        }       
        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        /// <param name="function"></param>
        private void CheckForOptimisticConcurrencyException(ObjectDataSourceStatusEventArgs e, string function)
        {
            if (e.Exception.InnerException is OptimisticConcurrencyException)
            {
                var concurrencyExceptionValidator = new CustomValidator();
                concurrencyExceptionValidator.IsValid = false;
                concurrencyExceptionValidator.ErrorMessage =
                    "The record you attempted to edit or delete was modified by another " +
                    "user after you got the original value. The edit or delete operation was canceled " +
                    "and the other user's values have been displayed so you can " +
                    "determine whether you still want to edit or delete this record.";
                Page.Validators.Add(concurrencyExceptionValidator);
                e.ExceptionHandled = true;
            }
        }

    }
}