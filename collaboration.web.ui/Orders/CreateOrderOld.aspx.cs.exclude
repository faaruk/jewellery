using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using Collaboration.Business.Entities;
using Collaboration.Business.Components;
using System.IO;
using Collaboration.Web.UI.Utilities;
using System.Configuration;
using DevExpress.XtraPrinting.Native;

namespace Collaboration.Web.UI.Orders
{
    public partial class CreateOrder : BasePage
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Page_Load(object sender, EventArgs e)
        {
            var Action = Request.Form["ac"];
            if (!string.IsNullOrEmpty(Action))
            {
                RemoveImage();
            }

            if (!IsPostBack)
              EditOrder.FillInfo();
        }

        private void RemoveImage()
        {
            try
            {
                Response.Clear();
                var fileName = Request.Form["fn"];

                if (Session[Common.SESSION_SPECIMENIMAGES] != null)
                {
                    //Session[Common.SESSION_SPECIMENIMAGES] =
                    //    (Session[Common.SESSION_SPECIMENIMAGES] as List<Specimen>).Where(i => i.ImageFile != fileName)
                    //        .ToList();
                    Session[Common.SESSION_SPECIMENIMAGES] =
                          (Session[Common.SESSION_SPECIMENIMAGES] as List<Specimen>).Where(i => i.ImageLocationURL != fileName)
                          .ToList();
                }
            }
            catch
                (Exception ex)
            {
                Response.Write(ex.Message);
            }
            finally
            {
                Response.End();
            }
        }

        /// <summary>
                /// 
                /// </summary>
                /// <param name="sender"></param>
                /// <param name="e"></param>
            protected
            void btnSave_Click(object sender, EventArgs e)
        {
            Order order = EditOrder.PlaceCADOrder();

            if (EditOrder.IsValidFile)
            {
                try
                {
                    int orderID=0;
                    if (new OrderManager().CreateOrder(order, ref orderID))
                    {
                        
                      
                        btnSave.CssClass = Resource.UI_BtnSuccess;
                        btnSave.Visible = false;
                        btnReset.Visible = false;
                        btnPlaceNewOrder.Visible = true;
                        Session[Collaboration.Web.UI.Common.SESSION_ORDERASSIGNED] = null;
                        (this.Master as DasbhoardMaster).UpdateOrderdAssigned();

                        OrderDetails_Result orderDetails = new OrderManager().GetOrderDetails(orderID, 0);
                        if (Convert.ToBoolean(order.IsCADRequested) && string.IsNullOrEmpty(orderDetails.CustomerEmail))
                            divCustomerEmail.Visible = true;
                        MoveFiles(orderID.ToString(), Session[Common.SESSION_SPECIMENIMAGES] as List<Specimen>);
                        
                        //int NoOfSamples=EditOrder.SetValues(orderDetails);

                        Dictionary<string, string> dicSamples = new Dictionary<string, string>();
                        dicSamples = EditOrder.SetValues(orderDetails);
                        EditOrder.Visible = false;

                        string strMessage = Resource.Info_CADAdded + ". Your order number is: " + orderDetails.SerialNumber;
                        if (dicSamples.Count>0)
                        {
                            strMessage += " with following <b>" + dicSamples["NoOfSample"] + "</b> sample order number";
                            strMessage += "<br/>Sample Reference Number"+ (Convert.ToInt16(dicSamples["NoOfSample"]) > 1?"s:":":")+" <b>" + dicSamples["SampleNumbers"]+"</b>";
                            
                        }

                        TicketUtility.ShowMessage(dvMessage, ltMessage, Convert.ToInt16(Common.MessageTypes.Success), strMessage);
                    }
                    else
                        TicketUtility.ShowMessage(dvMessage, ltMessage, Convert.ToInt16(Common.MessageTypes.Error), Resource.Err_General);
                }
                catch (BLLException exception)
                {
                    TicketUtility.ShowMessage(dvMessage, ltMessage, Convert.ToInt16(Common.MessageTypes.Error), exception.ErrorMessage);
                    ExceptionUtility.LogException(exception, Common.INFO_PROCEDURE + exception.ProcedureName);
                    btnSave.CssClass = Resource.UI_BtnDanger;
                    //btnPlaceNewOrder.Visible = true;
                }
                catch (Exception exception)
                {
                    TicketUtility.ShowMessage(dvMessage, ltMessage, Convert.ToInt16(Common.MessageTypes.Error), Resource.Err_General);
                    ExceptionUtility.LogException(exception, "Sender: " + Request.RawUrl);
                    btnSave.CssClass = Resource.UI_BtnDanger;
                    // btnPlaceNewOrder.Visible = true;
                }
            }
            else
            {
                TicketUtility.ShowMessage(dvMessage, ltMessage, Convert.ToInt16(Common.MessageTypes.Error), Resource.Err_InvalidImage);
                btnSave.CssClass = Resource.UI_BtnDanger;    
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnPlaceNewOrder_Click(object sender, EventArgs e)
        {
            Response.Redirect("~/Orders/CreateOrder.aspx");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnReset_Click(object sender, EventArgs e)
        {
            EditOrder.ResetValues();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="SerialNumber"></param>
        /// <param name="lst"></param>
        private void MoveFiles(string orderID, List<Specimen> lst)
        {        
            if (lst != null && lst.Count() > 0)
            {
                foreach (Specimen item in lst)
                {
                    string sourceFile = ConfigurationManager.AppSettings[Common.APPSETTINGS_SPECIMENIMAGESURL] + @"\Temp\" + item.ImageLocationURL;
              
                    if (System.IO.File.Exists(Server.MapPath(sourceFile)))
                    {
                        string destinationDir = ConfigurationManager.AppSettings[Common.APPSETTINGS_SPECIMENIMAGESURL] + @"\" + orderID;
                        
                        if (!System.IO.Directory.Exists(Server.MapPath(destinationDir)))
                            System.IO.Directory.CreateDirectory(Server.MapPath(destinationDir));

                        System.IO.File.Move(Server.MapPath(sourceFile), Server.MapPath(destinationDir + @"\" + item.ImageLocationURL));
                    }
                }
            }
            Session[Common.SESSION_SPECIMENIMAGES] = null;
        }


        /// <summary>
        /// Method to get customers name based on search text
        /// </summary>
        /// <param name="prefixText"></param>
        /// <returns></returns>
        //[System.Web.Script.Services.ScriptMethod()]
        //[System.Web.Services.WebMethod]
        //public static List<string> GetCustomers(string prefixText)
        //{
        //    List<string> lstCustomersName = new List<string>();
        //    List<Customer> lstCustomers=new AdminManager().GetCustomers();
        //    lstCustomersName = (lstCustomers.Where(x => ( x.CustomerName != null && x.CustomerCode!=null && (x.CustomerName.Contains(prefixText) || x.CustomerCode.Contains(prefixText))) )).Select(x => x.CustomerName+":"+x.CustomerCode).ToList();

        //    return lstCustomersName;
        //}
         
    }
}