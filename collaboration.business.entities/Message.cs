//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Collaboration.Business.Entities
{
    public partial class Message
    {
        #region Primitive Properties
    
        public virtual int MessageThreadID
        {
            get { return _messageThreadID; }
            set
            {
                if (_messageThreadID != value)
                {
                    if (MessageThread != null && MessageThread.MessageThreadID != value)
                    {
                        MessageThread = null;
                    }
                    _messageThreadID = value;
                }
            }
        }
        private int _messageThreadID;
    
        public virtual int MessageID
        {
            get;
            set;
        }
    
        public virtual string MessageText
        {
            get;
            set;
        }
    
        public virtual int SentFrom
        {
            get { return _sentFrom; }
            set
            {
                if (_sentFrom != value)
                {
                    if (User != null && User.UserID != value)
                    {
                        User = null;
                    }
                    _sentFrom = value;
                }
            }
        }
        private int _sentFrom;
    
        public virtual string Subject
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsActive
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> HasAttachment
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreateDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ModifyDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual MessageThread MessageThread
        {
            get { return _messageThread; }
            set
            {
                if (!ReferenceEquals(_messageThread, value))
                {
                    var previousValue = _messageThread;
                    _messageThread = value;
                    FixupMessageThread(previousValue);
                }
            }
        }
        private MessageThread _messageThread;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<MessagesAttachment> MessagesAttachments
        {
            get
            {
                if (_messagesAttachments == null)
                {
                    var newCollection = new FixupCollection<MessagesAttachment>();
                    newCollection.CollectionChanged += FixupMessagesAttachments;
                    _messagesAttachments = newCollection;
                }
                return _messagesAttachments;
            }
            set
            {
                if (!ReferenceEquals(_messagesAttachments, value))
                {
                    var previousValue = _messagesAttachments as FixupCollection<MessagesAttachment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessagesAttachments;
                    }
                    _messagesAttachments = value;
                    var newValue = value as FixupCollection<MessagesAttachment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessagesAttachments;
                    }
                }
            }
        }
        private ICollection<MessagesAttachment> _messagesAttachments;
    
        public virtual ICollection<MessageTo> MessageToes
        {
            get
            {
                if (_messageToes == null)
                {
                    var newCollection = new FixupCollection<MessageTo>();
                    newCollection.CollectionChanged += FixupMessageToes;
                    _messageToes = newCollection;
                }
                return _messageToes;
            }
            set
            {
                if (!ReferenceEquals(_messageToes, value))
                {
                    var previousValue = _messageToes as FixupCollection<MessageTo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessageToes;
                    }
                    _messageToes = value;
                    var newValue = value as FixupCollection<MessageTo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessageToes;
                    }
                }
            }
        }
        private ICollection<MessageTo> _messageToes;
    
        public virtual ICollection<Specimen> Specimens
        {
            get
            {
                if (_specimens == null)
                {
                    var newCollection = new FixupCollection<Specimen>();
                    newCollection.CollectionChanged += FixupSpecimens;
                    _specimens = newCollection;
                }
                return _specimens;
            }
            set
            {
                if (!ReferenceEquals(_specimens, value))
                {
                    var previousValue = _specimens as FixupCollection<Specimen>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSpecimens;
                    }
                    _specimens = value;
                    var newValue = value as FixupCollection<Specimen>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSpecimens;
                    }
                }
            }
        }
        private ICollection<Specimen> _specimens;

        #endregion
        #region Association Fixup
    
        private void FixupMessageThread(MessageThread previousValue)
        {
            if (previousValue != null && previousValue.Messages.Contains(this))
            {
                previousValue.Messages.Remove(this);
            }
    
            if (MessageThread != null)
            {
                if (!MessageThread.Messages.Contains(this))
                {
                    MessageThread.Messages.Add(this);
                }
                if (MessageThreadID != MessageThread.MessageThreadID)
                {
                    MessageThreadID = MessageThread.MessageThreadID;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Messages.Contains(this))
            {
                previousValue.Messages.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Messages.Contains(this))
                {
                    User.Messages.Add(this);
                }
                if (SentFrom != User.UserID)
                {
                    SentFrom = User.UserID;
                }
            }
        }
    
        private void FixupMessagesAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MessagesAttachment item in e.NewItems)
                {
                    item.Message = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MessagesAttachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Message, this))
                    {
                        item.Message = null;
                    }
                }
            }
        }
    
        private void FixupMessageToes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MessageTo item in e.NewItems)
                {
                    item.Message = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MessageTo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Message, this))
                    {
                        item.Message = null;
                    }
                }
            }
        }
    
        private void FixupSpecimens(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Specimen item in e.NewItems)
                {
                    item.Message = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Specimen item in e.OldItems)
                {
                    if (ReferenceEquals(item.Message, this))
                    {
                        item.Message = null;
                    }
                }
            }
        }

        #endregion
    }
}
