//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Collaboration.Business.Entities
{
    public partial class TicketThread
    {
        #region Primitive Properties
    
        public virtual int TicketThreadID
        {
            get;
            set;
        }
    
        public virtual string Subject
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Status
        {
            get;
            set;
        }
    
        public virtual string ClosingRemarks
        {
            get;
            set;
        }
    
        public virtual Nullable<int> LastModifiedBy
        {
            get { return _lastModifiedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_lastModifiedBy != value)
                    {
                        if (User1 != null && User1.UserID != value)
                        {
                            User1 = null;
                        }
                        _lastModifiedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _lastModifiedBy;
    
        public virtual Nullable<int> AssignedTo
        {
            get { return _assignedTo; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_assignedTo != value)
                    {
                        if (User != null && User.UserID != value)
                        {
                            User = null;
                        }
                        _assignedTo = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _assignedTo;
    
        public virtual Nullable<bool> IsActive
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreateDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ModifyDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CreatedBy
        {
            get { return _createdBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_createdBy != value)
                    {
                        if (User1_1 != null && User1_1.UserID != value)
                        {
                            User1_1 = null;
                        }
                        _createdBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _createdBy;

        #endregion
        #region Navigation Properties
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual User User1
        {
            get { return _user1; }
            set
            {
                if (!ReferenceEquals(_user1, value))
                {
                    var previousValue = _user1;
                    _user1 = value;
                    FixupUser1(previousValue);
                }
            }
        }
        private User _user1;
    
        public virtual User User1_1
        {
            get { return _user1_1; }
            set
            {
                if (!ReferenceEquals(_user1_1, value))
                {
                    var previousValue = _user1_1;
                    _user1_1 = value;
                    FixupUser1_1(previousValue);
                }
            }
        }
        private User _user1_1;
    
        public virtual ICollection<Ticket> Tickets
        {
            get
            {
                if (_tickets == null)
                {
                    var newCollection = new FixupCollection<Ticket>();
                    newCollection.CollectionChanged += FixupTickets;
                    _tickets = newCollection;
                }
                return _tickets;
            }
            set
            {
                if (!ReferenceEquals(_tickets, value))
                {
                    var previousValue = _tickets as FixupCollection<Ticket>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTickets;
                    }
                    _tickets = value;
                    var newValue = value as FixupCollection<Ticket>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTickets;
                    }
                }
            }
        }
        private ICollection<Ticket> _tickets;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.TicketThreads.Contains(this))
            {
                previousValue.TicketThreads.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.TicketThreads.Contains(this))
                {
                    User.TicketThreads.Add(this);
                }
                if (AssignedTo != User.UserID)
                {
                    AssignedTo = User.UserID;
                }
            }
            else if (!_settingFK)
            {
                AssignedTo = null;
            }
        }
    
        private void FixupUser1(User previousValue)
        {
            if (previousValue != null && previousValue.TicketThreads1.Contains(this))
            {
                previousValue.TicketThreads1.Remove(this);
            }
    
            if (User1 != null)
            {
                if (!User1.TicketThreads1.Contains(this))
                {
                    User1.TicketThreads1.Add(this);
                }
                if (LastModifiedBy != User1.UserID)
                {
                    LastModifiedBy = User1.UserID;
                }
            }
            else if (!_settingFK)
            {
                LastModifiedBy = null;
            }
        }
    
        private void FixupUser1_1(User previousValue)
        {
            if (previousValue != null && previousValue.TicketThreads1_1.Contains(this))
            {
                previousValue.TicketThreads1_1.Remove(this);
            }
    
            if (User1_1 != null)
            {
                if (!User1_1.TicketThreads1_1.Contains(this))
                {
                    User1_1.TicketThreads1_1.Add(this);
                }
                if (CreatedBy != User1_1.UserID)
                {
                    CreatedBy = User1_1.UserID;
                }
            }
            else if (!_settingFK)
            {
                CreatedBy = null;
            }
        }
    
        private void FixupTickets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Ticket item in e.NewItems)
                {
                    item.TicketThread = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Ticket item in e.OldItems)
                {
                    if (ReferenceEquals(item.TicketThread, this))
                    {
                        item.TicketThread = null;
                    }
                }
            }
        }

        #endregion
    }
}
