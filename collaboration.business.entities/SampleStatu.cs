//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Collaboration.Business.Entities
{
    public partial class SampleStatu
    {
        #region Primitive Properties

        public virtual int SampleStatusID
        {
            get;
            set;
        }

        public virtual string SampleStatusName
        {
            get;
            set;
        }

        public virtual bool IsActive
        {
            get;
            set;
        }

        public virtual Nullable<System.DateTime> CreateDate
        {
            get;
            set;
        }

        public virtual Nullable<System.DateTime> ModifyDate
        {
            get;
            set;
        }

        public virtual string Description
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties

        public virtual ICollection<SamplesTracking> SamplesTrackings
        {
            get
            {
                if (_samplesTrackings == null)
                {
                    var newCollection = new FixupCollection<SamplesTracking>();
                    newCollection.CollectionChanged += FixupSamplesTrackings;
                    _samplesTrackings = newCollection;
                }
                return _samplesTrackings;
            }
            set
            {
                if (!ReferenceEquals(_samplesTrackings, value))
                {
                    var previousValue = _samplesTrackings as FixupCollection<SamplesTracking>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSamplesTrackings;
                    }
                    _samplesTrackings = value;
                    var newValue = value as FixupCollection<SamplesTracking>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSamplesTrackings;
                    }
                }
            }
        }
        private ICollection<SamplesTracking> _samplesTrackings;

        public virtual ICollection<SamplesTrackingHistory> SamplesTrackingHistories
        {
            get
            {
                if (_samplesTrackingHistories == null)
                {
                    var newCollection = new FixupCollection<SamplesTrackingHistory>();
                    newCollection.CollectionChanged += FixupSamplesTrackingHistories;
                    _samplesTrackingHistories = newCollection;
                }
                return _samplesTrackingHistories;
            }
            set
            {
                if (!ReferenceEquals(_samplesTrackingHistories, value))
                {
                    var previousValue = _samplesTrackingHistories as FixupCollection<SamplesTrackingHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSamplesTrackingHistories;
                    }
                    _samplesTrackingHistories = value;
                    var newValue = value as FixupCollection<SamplesTrackingHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSamplesTrackingHistories;
                    }
                }
            }
        }
        private ICollection<SamplesTrackingHistory> _samplesTrackingHistories;

        #endregion

        #region Association Fixup

        private void FixupSamplesTrackings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SamplesTracking item in e.NewItems)
                {
                    item.SampleStatu = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (SamplesTracking item in e.OldItems)
                {
                    if (ReferenceEquals(item.SampleStatu, this))
                    {
                        item.SampleStatu = null;
                    }
                }
            }
        }

        private void FixupSamplesTrackingHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SamplesTrackingHistory item in e.NewItems)
                {
                    item.SampleStatu = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (SamplesTrackingHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.SampleStatu, this))
                    {
                        item.SampleStatu = null;
                    }
                }
            }
        }

        #endregion

    }
}
